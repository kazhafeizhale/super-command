<?xml version="1.0"?>
<Menu>
	<Item name="@网站文件夹" tv="9702528">
		<Item name="百度" tv="9702640">run,www.baidu.com</Item>
		<Item name="虎牙" tv="9704656">run,www.huya.com</Item>
		<Item name="斗鱼" tv="9702976">run, www.douyu.com</Item>
		<Item name="ahk中文论坛autoahk" tv="9703424">run,www.autoahk.com</Item>
		<Item name="ahk官网论坛autohotkey" tv="9703760">run, www.autohotkey.com</Item>
		<Item name="github" tv="9703872">run,https:github.com</Item>
		<Item name="github镜像" tv="9704880">run,https://hub.fastgit.org/</Item>
		<Item name="卡牌card目录" tv="9703312">run,G:\我的AHK程序\游戏脚本\lol脚本集合\HX英雄联盟卡牌极速切牌</Item>
		<Item name="云顶之奕" tv="9702752">run,G:\我的AHK程序\游戏脚本\HX云顶之奕挂机脚本</Item>
		<Item name="我的ahk工程" tv="9703984">run,G:\我的AHK程序\我的工程</Item>
		<Item name="超级命令目录" tv="9704544" last="1">run,G:\我的AHK程序\我的工程\超级命令</Item>
		<Item name="gitee" tv="9704992">run, https://gitee.com/</Item>
		<Item name="必应" tv="9702864">run,https://cn.bing.com/</Item>
		<Item name="必应图片" tv="9705104">run,https://cn.bing.com/images/trending?form=Z9LH</Item>
		<Item name="bilibilib站" tv="9703088">run,https://www.bilibili.com/</Item>
		<Item name="打字练习网站" tv="9703200">run,https://dazi.kukuw.com/
run,https://www.bilibili.com/video/av57373164?from=search&amp;seid=7505871621684040908</Item>
		<Item name="正则表达式帮助" tv="9703536">run,C:\Users\hetong\Documents\Tencent Files\2397633100\FileRecv\55分钟学会正则表达式.DOC</Item>
		<Item name="c++中文网" tv="9701856">run,http://c.biancheng.net/view/151.html</Item>
		<Item name="c++chm" tv="9703648">run,G:\书籍\C++手册\cppreference-zh-20191207.chm</Item>
		<Item name="leedcode" tv="9705216">run,https://leetcode-cn.com</Item>
		<Item name="linux命令大全" tv="9704320">run,https://man.linuxde.net/</Item>
		<Item name="google" tv="9705440">run,www.google.com</Item>
		<Item name="goo" tv="9701968"></Item>
		<Item name="autohotkey目录" tv="9702080">run,C:\Program Files\AutoHotkey</Item>
		<Item name="嗨正则" tv="9764240">run,https://hiregex.com/</Item>
		<Item name="音乐" tv="9761776">run,http://tool.liumingye.cn/music/?page=searchPage</Item>
		<Item name="thqby gitee" tv="9763792">run,https://gitee.com/barbarla/AHK_Lib/tree/master</Item>
		<Item name="电影" tv="9764688">run,https://lab.liumingye.cn/vodplay/67631-1-1.html</Item>
		<Item name="小众软件" tv="9764352">run,https://www.appinn.com/</Item></Item>
	<Item name="@笔记" tv="9764576">
		<Item name="vscode" tv="9764800">
			<Item name="快捷键" tv="9765248">alt+m 主界面</Item></Item></Item>
	<Item name="@软件" tv="9764912">
		<Item name="词典" tv="9762672">run,C:\Users\hetong\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\网易有道词典.lnk</Item>
		<Item name="音乐" tv="9765024">run,C:\ProgramData\Microsoft\Windows\Start Menu\Programs\网易云音乐.lnk</Item>
		<Item name="cherry笔记" tv="9765136">run,G:\CherryTree\bin\cherrytree.exe</Item>
		<Item name="搜索" tv="9762784">Run, everything, F:\everything,</Item>
		<Item name="画图可汗" tv="9762000">run,F:\绘图软件\SmoothDraw\SmoothDraw4.exe F:\绘图软件\模板.sddoc</Item>
		<Item name="tgp" tv="9762336">Run,*RunAs WeGame,E:\wegeme,</Item>
		<Item name="录制" tv="9763344">run,bdcam.exe,F:\Bandicam</Item>
		<Item name="百度网盘" tv="9762448">run,baidunetdisk.exe,F:\BaiduNetdisk</Item>
		<Item name="截图" tv="9762896">run,FSCapture.exe,C:\Program Files (x86)\FastStone Capture\
</Item>
		<Item name="秒表" tv="9763456">run,G:\我的AHK程序\脚本范例\ahkexample\各种脚本\其他合集\AHK 快餐店文中脚本\4.1-4.2计时器_闹钟 13秒表\13.秒表.ahk</Item>
		<Item name="gif录屏" tv="9763568">run,F:\gif\屏幕录制ScreenToGif 2.34.1.exe</Item>
		<Item name="正则表达式ahk" tv="9431520">run,C:\Users\hetong\Desktop\我的AHK程序\Adventure\Tools\Expressive\Expressive.ahk</Item>
		<Item name="正则表达式buddy" tv="9432080">run, F:\正则表达式\RegexBuddy4.9.exe</Item>
		<Item name="按键显示" tv="9432304">run,G:\我的AHK程序\我的工程\KeyPress-OSD-master（按键显示工具）\keycastow\keycastow.exe</Item></Item>
	<Item name="@命令" tv="9432976">
		<Item name="关机" tv="9432416">msgbox, no this command</Item>
		<Item name="窗口置顶" tv="9432528">MouseGetPos, MouseX, MouseY, MouseWin
; 似乎有必要首先关闭任何现有的透明度:
WinSet, AlwaysOnTop, TOGGLE , ahk_id %MouseWin%</Item>
		<Item name="vim操作说明" tv="9431408">CommandText =
    (% 
重要的概念
	增：
		a/A(append)   i/i(insert)  o/O(open a line)
	删：
		diw(delete inner word)   daw(delete around word)  dd(delete a line word)
		x 删除一个字符  
		s 删除一个字符并进入插入模式 S 删除一行进入插入模式
		D 删除当前到行尾 
		C 删除当前到行尾巴进入插入模式
		删除不剪切  "_dd
	改：
		c (change as word)  ci字符(例如：ci" 删除引号里面的内容，并改成插入模式)   ct字符(删除到字符的内容，并改成插入模式)
	查：
		f字符(向前查找字符)   F字符(向后查找字符)  ;(重复上一个命名)
		命令模式下：   /字符(高亮字符，并向前查)   ?字符(高亮字符，并向后查)
	复制 y  复制到行首 y0  复制到行尾 y$  复制到( yF(    yi(    yt)


	替换:
		:s/(obj)/(value)/c
			范围：%s 表示全文 5s 第5行  .,+3当前行和接下来两行  %s全文
			c:表示需要确认-&gt; y n  1  a
			g:表示行中所有

	光标移动：
		h j k l (左 下 上  右)
		w(前字符)   b()
		:数字   数字G    gg   G    0(行首)  $(行尾) 
		
		ctrl+o(向后跳转)   ctrl+i(向前跳转)
		zz:行光标屏幕中心  zt 行光标屏幕顶部  zb行光标屏幕底部
		L:定位屏幕底部
		H:定位到屏幕顶
		
	翻页：
		Ctrl+f(forward  page)   ctrl+b(back page)
		ctrl+e(屏幕向下滚动一行)  ctrl+y(屏幕向上滚动一行)
		ctrl+d(down)   ctrl+u()
	
	编辑：
		u(撤销上一步的操作)    Ctrl+r(恢复上一步被撤销的操作)
	设置：
		set: clipboard=unnamed
		set: hlsearch  
		set: nohlsearch
	
	jkhl：单个光标移动
	a，A
	i , I
	o, O 
	x 
	w
	b
	daw diw d$ d0   dw db  
	caw ciw  c$ c0  cw cb  ci"  ci}  ci)  
	} {  段落跳转
	[[  ]] 函数跳转  
	% 跳转到匹配的括号
	ma 标记位置a,  `a 调转到a处， ‘a跳转到a行首

	宏录制：
		qa：录制到a寄存, q退出录制
		@a:执行a

	寄存器：
		"+:默认寄存器，复制，剪切命令会存到这里
		"0:最近复制的内容
		"1-9:最近剪切的内容
		"a-z:可以选择复制剪切的的寄存器
		"A-Z:内容归家到a-z里面
		命令模式使用寄存器内容：ctrl+" 然后输入寄存器名字
	vscode:
		gh 鼠标悬停效果  gd 跳转定义处
) 
Instruction := CommandText
Content := ""
TaskDialog(Instruction, Content, "", 0x1, 0)
run,C:\Users\hetong\Desktop\我的AHK程序\自动化办公\vim.png 


TaskDialog(Instruction, Content := "", Title := "", Buttons := 1, IconID := 0, IconRes := "", Owner := 0x10010) {
    Local hModule, LoadLib, Ret

    If (IconRes != "") {
        hModule := DllCall("GetModuleHandle", "Str", IconRes, "Ptr")
        LoadLib := !hModule
            &amp;&amp; hModule := DllCall("LoadLibraryEx", "Str", IconRes, "UInt", 0, "UInt", 0x2, "Ptr")
    } Else {
        hModule := 0
        LoadLib := False
    }

    DllCall("TaskDialog"
        , "Ptr" , Owner        ; hWndParent
        , "Ptr" , hModule      ; hInstance
        , "Ptr" , &amp;Title       ; pszWindowTitle
        , "Ptr" , &amp;Instruction ; pszMainInstruction
        , "Ptr" , &amp;Content     ; pszContent
        , "Int" , Buttons      ; dwCommonButtons
        , "Ptr" , IconID       ; pszIcon
        , "Int*", Ret := 0)    ; *pnButton

    If (LoadLib) {
        DllCall("FreeLibrary", "Ptr", hModule)
    }

    Return {1: "OK", 2: "Cancel", 4: "Retry", 6: "Yes", 7: "No", 8: "Close"}[Ret]
}</Item>
		<Item name="ipconfig" tv="9433088">#include &lt;runcmd&gt;
#include &lt;log4ahk&gt;
rtn := cmd.run("ifconfig")
log.info(rtn)</Item>
		<Item name="test" tv="9432864">#include &lt;log4ahk&gt;
log.info("a")
ExitApp</Item>
		<Item name="test2" tv="9432640">#include &lt;log4ahk&gt;
log.info("aaa")</Item>
		<Item name="mathematica" tv="9431296">
			<Item name="转换为c语言" tv="9431632">
inputvar = 
(
CForm[expr]
)
	clipboard:=inputvar </Item>
			<Item name="yy" tv="9431744"></Item></Item></Item>
	<Item name="@ahk" tv="9709552">
		<Item name="帮助手册" tv="9707312">run,https://www.autoahk.com/help/autohotkey/zh-cn/docs/AutoHotkey.htm</Item>
		<Item name="开头设置" tv="9707200">#NoEnv
#KeyHistory 0
#MaxThreads 255
#MaxMem 4095
#MaxThreadsBuffer On
#MaxHotkeysPerInterval 99000000
#HotkeyInterval 99000000
#SingleInstance Force
ListLines Off
Process, Priority, , R
SetTitleMatchMode fast
SetBatchLines, -1
SetKeyDelay, -1, -1, -1
SetMouseDelay, -1
SetWinDelay, -1
SetControlDelay, -1
SetDefaultMouseSpeed, 0
CoordMode, ToolTip , Screen
CommandText =
    (%
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.
#NoEnv
#KeyHistory 0
#MaxThreads 255
#MaxMem 4095
#MaxThreadsBuffer On
#MaxHotkeysPerInterval 99000000
#HotkeyInterval 99000000
#SingleInstance Force
ListLines Off
Process, Priority, , R
SetTitleMatchMode fast
SetBatchLines, -1
SetKeyDelay, -1, -1, -1
SetMouseDelay, -1
SetWinDelay, -1
SetControlDelay, -1
SetDefaultMouseSpeed, 0
CoordMode, ToolTip , Screen 
    )    
clipboard:=CommandText</Item>
		<Item name="快捷输入模板" tv="9708544">CommandText =
(%
CommandText =
`(%
替换为自己的命令 
`)    
clipboard:=CommandText
)    
clipboard:=CommandText</Item>
		<Item name="include库" tv="9708096">CommandText =
(%
#Include &lt;log4ahk&gt;
#Include &lt;my_lib&gt;
)
clipboard:=CommandText</Item>
		<Item name="字符串转双引号其他语言" tv="9708880">run,G:\我的AHK程序\我的工程\字符片段转延续片段\字符串转双引号.ahk</Item>
		<Item name="字符串转延续片段" tv="9708656">run,G:\我的AHK程序\我的工程\字符片段转延续片段\字符片段转延续片段.ahk</Item>
		<Item name="dialog" tv="9707872">c=
(%
Clipboard := c
TaskDialog(Clipboard, "", "", 0x1, 0)
TaskDialog(Instruction, Content := "", Title := "", Buttons := 1, IconID := 0, IconRes := "", Owner := 0x10010) {
	Local hModule, LoadLib, Ret
	
	If (IconRes != "") {
		hModule := DllCall("GetModuleHandle", "Str", IconRes, "Ptr")
		LoadLib := !hModule
            &amp;&amp; hModule := DllCall("LoadLibraryEx", "Str", IconRes, "UInt", 0, "UInt", 0x2, "Ptr")
	} Else {
		hModule := 0
		LoadLib := False
	}
	
	DllCall("TaskDialog"
        , "Ptr" , Owner        ; hWndParent
        , "Ptr" , hModule      ; hInstance
        , "Ptr" , &amp;Title       ; pszWindowTitle
        , "Ptr" , &amp;Instruction ; pszMainInstruction
        , "Ptr" , &amp;Content     ; pszContent
        , "Int" , Buttons      ; dwCommonButtons
        , "Ptr" , IconID       ; pszIcon
        , "Int*", Ret := 0)    ; *pnButton
	
	If (LoadLib) {
		DllCall("FreeLibrary", "Ptr", hModule)
	}
	
	Return {1: "OK", 2: "Cancel", 4: "Retry", 6: "Yes", 7: "No", 8: "Close"}[Ret]
}
)
Clipboard := c
TaskDialog(Clipboard, "", "", 0x1, 0)
TaskDialog(Instruction, Content := "", Title := "", Buttons := 1, IconID := 0, IconRes := "", Owner := 0x10010) {
	Local hModule, LoadLib, Ret
	
	If (IconRes != "") {
		hModule := DllCall("GetModuleHandle", "Str", IconRes, "Ptr")
		LoadLib := !hModule
            &amp;&amp; hModule := DllCall("LoadLibraryEx", "Str", IconRes, "UInt", 0, "UInt", 0x2, "Ptr")
	} Else {
		hModule := 0
		LoadLib := False
	}
	
	DllCall("TaskDialog"
        , "Ptr" , Owner        ; hWndParent
        , "Ptr" , hModule      ; hInstance
        , "Ptr" , &amp;Title       ; pszWindowTitle
        , "Ptr" , &amp;Instruction ; pszMainInstruction
        , "Ptr" , &amp;Content     ; pszContent
        , "Int" , Buttons      ; dwCommonButtons
        , "Ptr" , IconID       ; pszIcon
        , "Int*", Ret := 0)    ; *pnButton
	
	If (LoadLib) {
		DllCall("FreeLibrary", "Ptr", hModule)
	}
	
	Return {1: "OK", 2: "Cancel", 4: "Retry", 6: "Yes", 7: "No", 8: "Close"}[Ret]
}
</Item>
		<Item name="脚本库" tv="9707536">
			<Item name="json_feiyue_源码" tv="9706416">;------------------------------
;  JSon.ahk - v2.1  By FeiYue
;------------------------------


json_toobj(s)  ; JSon字符串转AHK对象
{
  static rep:=[ ["\\","\u005c"], ["\""",""""], ["\/","/"]
    , ["\r","`r"], ["\n","`n"], ["\t","`t"]
    , ["\b","`b"], ["\f","`f"] ]
  if !(p:=RegExMatch(s, "[\{\[]", r))
    return
  SetBatchLines, % (bch:=A_BatchLines)?"-1":"-1"
  stack:=[], obj:=arr:=[], is_arr:=(r="[")
  , key:=(is_arr ? 1:""), keyok:=0
  While p:=RegExMatch(s, "\S", r, p+StrLen(r))
  {
    if (r="{" or r="[")  ; 如果是 左括号
    {
      stack.Push(is_arr, arr), arr[key]:=[], arr:=arr[key]
      , is_arr:=(r="["), key:=(is_arr ? 1:""), keyok:=0
    }
    else if (r="}" or r="]")  ; 如果是 右括号
    {
      if !stack.Length()
        Break
      arr:=stack.Pop(), is_arr:=stack.Pop()
      , key:=(is_arr ? arr.Length():""), keyok:=0
    }
    else if (r=",")  ; 如果是 逗号
    {
      key:=(is_arr ? Floor(key)+1:""), keyok:=0
    }
    else if (r="""")  ; 如果是 双引号
    {
      if RegExMatch(s, """((?:[^""\\]|\\[\s\S])*)""", r, p)!=p
        Break
      if InStr(r1, "\")
      {
        For k,v in rep
          r1:=StrReplace(r1, v[1], v[2])
        v:="", k:=1
        While i:=RegExMatch(r1, "\\u[0-9A-Fa-f]{4}",, k)
          v.=SubStr(r1,k,i-k) . Chr("0x" SubStr(r1,i+2,4)), k:=i+6
        r1:=v . SubStr(r1,k)
      }
      if (!is_arr and keyok=0)
      {
        p+=StrLen(r)
        if RegExMatch(s, "\s*:", r, p)!=p
          Break
        key:=r1, keyok:=1
      }
      else arr[key]:=r1
    }
    else  ; 如果是 true、false、null、数字
    {
      if RegExMatch(s, "[\w\+\-\.]+", r, p)!=p
        Break
      arr[key]:=(r=="true" ? 1:r=="false" ? 0:r=="null" ? "":r+0)
    }
  }
  SetBatchLines, %bch%
  return obj
}

json_fromobj(obj, space:="")  ; AHK对象转JSon字符串
{
  ;-------------------
  ; 默认不替换 "/--&gt;\/" 与 特殊html字符&lt;、&gt;、&amp;
  ;-------------------
  static rep:=[ ["\\","\"], ["\""",""""]  ; , ["\/","/"]
    ; , ["\\u003c","&lt;"], ["\\u003e","&gt;"], ["\\u0026","&amp;"]
    , ["\r","`r"], ["\n","`n"], ["\t","`t"]
    , ["\b","`b"], ["\f","`f"] ]
  if !IsObject(obj)
  {
    if obj is Number  ; thanks lexikos
      return ([obj].GetCapacity(1) ? """" obj """" : obj)
    ;-------------------
    ; 布尔值在AHK中转为数字了
    ; if (obj=="true" or obj=="false" or obj=="null")
    ;   return obj
    ;-------------------
    For k,v in rep
      obj:=StrReplace(obj, v[2], v[1])
    ;-------------------
    ; 默认不替换 "Unicode字符--&gt;\uXXXX"
    ; While RegExMatch(obj, "[^\x20-\x7e]", k)
    ;   obj:=StrReplace(obj, k, Format("\u{:04x}",Ord(k)))
    ;-------------------
    return """" obj """"
  }
  is_arr:=1  ; 是简单数组
  For k,v in obj
    if (k!=A_Index) and !(is_arr:=0)
      Break
  s:="", space2:=space . "    ", f:=A_ThisFunc
  For k,v in obj
    s.= "`r`n" space2
    . (is_arr ? "" : """" Trim(%f%(k ""),"""") """: ")
    . %f%(v,space2) . ","
  return (is_arr?"[":"{") . Trim(s,",")
    . "`r`n" space . (is_arr?"]":"}")
}


s=
(

{
    "name": "BeJson",
    "url": "http://www.bejson.com",
    "page": 88,
    "page2": "88",
    "isNonProfit": true,
    "address": {
        "street": "科技园路",
        "city": "江苏苏州",
        "country": "中国"
    },
    "links": [
        {
            "name": "Google",
            "url": "http://www.google.com"
        },
        {
            "name": "Baidu",
            "url": "http://www.baidu.com"
        },
        {
            "name": "SoSo",
            "url": "http://www.SoSo.com"
        }
    ]
}

)</Item>
			<Item name="win_ocr" tv="9708768">#NoEnv
SetBatchLines, -1
Return

Esc:: ExitApp

^X::
hBitmap := HBitmapFromScreen(GetArea()*)
pIRandomAccessStream := HBitmapToRandomAccessStream(hBitmap)
DllCall("DeleteObject", "Ptr", hBitmap)
text := ocr(pIRandomAccessStream, "ru")
MsgBox, % text
Return

GetArea() {
   area := []
   StartSelection(area)
   while !area.w
      Sleep, 100
   Return area
}
   
StartSelection(area) {
   handler := Func("Select").Bind(area)
   Hotkey, LButton, % handler, On
   ReplaceSystemCursors("IDC_CROSS")
}

Select(area) {
   static hGui := CreateSelectionGui()
   Hook := new WindowsHook(WH_MOUSE_LL := 14, "LowLevelMouseProc", hGui)
   Loop {
      KeyWait, LButton
      WinGetPos, X, Y, W, H, ahk_id %hGui%
   } until w &gt; 0
   ReplaceSystemCursors("")
   Hotkey, LButton, Off
   Hook := ""
   Gui, %hGui%:Show, Hide
   for k, v in ["x", "y", "w", "h"]
      area[v] := %v%
}

ReplaceSystemCursors(IDC = "")
{
   static IMAGE_CURSOR := 2, SPI_SETCURSORS := 0x57
        , exitFunc := Func("ReplaceSystemCursors").Bind("")
        , SysCursors := { IDC_APPSTARTING: 32650
                        , IDC_ARROW      : 32512
                        , IDC_CROSS      : 32515
                        , IDC_HAND       : 32649
                        , IDC_HELP       : 32651
                        , IDC_IBEAM      : 32513
                        , IDC_NO         : 32648
                        , IDC_SIZEALL    : 32646
                        , IDC_SIZENESW   : 32643
                        , IDC_SIZENWSE   : 32642
                        , IDC_SIZEWE     : 32644
                        , IDC_SIZENS     : 32645 
                        , IDC_UPARROW    : 32516
                        , IDC_WAIT       : 32514 }
   if !IDC {
      DllCall("SystemParametersInfo", UInt, SPI_SETCURSORS, UInt, 0, UInt, 0, UInt, 0)
      OnExit(exitFunc, 0)
   }
   else  {
      hCursor := DllCall("LoadCursor", Ptr, 0, UInt, SysCursors[IDC], Ptr)
      for k, v in SysCursors  {
         hCopy := DllCall("CopyImage", Ptr, hCursor, UInt, IMAGE_CURSOR, Int, 0, Int, 0, UInt, 0, Ptr)
         DllCall("SetSystemCursor", Ptr, hCopy, UInt, v)
      }
      OnExit(exitFunc)
   }
}

CreateSelectionGui() {
   Gui, New, +hwndhGui +Alwaysontop -Caption +LastFound +ToolWindow +E0x20 -DPIScale
   WinSet, Transparent, 130
   Gui, Color, FFC800
   Return hGui
}

LowLevelMouseProc(nCode, wParam, lParam) {
   static WM_MOUSEMOVE := 0x200, WM_LBUTTONUP := 0x202
        , coords := [], startMouseX, startMouseY, hGui
        , timer := Func("LowLevelMouseProc").Bind("timer", "", "")
   
   if (nCode = "timer") {
      while coords[1] {
         point := coords.RemoveAt(1)
         mouseX := point[1], mouseY := point[2]
         x := startMouseX &lt; mouseX ? startMouseX : mouseX
         y := startMouseY &lt; mouseY ? startMouseY : mouseY
         w := Abs(mouseX - startMouseX)
         h := Abs(mouseY - startMouseY)
         try Gui, %hGUi%: Show, x%x% y%y% w%w% h%h% NA
      }
   }
   else {
      (!hGui &amp;&amp; hGui := A_EventInfo)
      if (wParam = WM_LBUTTONUP)
         startMouseX := startMouseY := ""
      if (wParam = WM_MOUSEMOVE)  {
         mouseX := NumGet(lParam + 0, "Int")
         mouseY := NumGet(lParam + 4, "Int")
         if (startMouseX = "") {
            startMouseX := mouseX
            startMouseY := mouseY
         }
         coords.Push([mouseX, mouseY])
         SetTimer, % timer, -10
      }
      Return DllCall("CallNextHookEx", Ptr, 0, Int, nCode, UInt, wParam, Ptr, lParam)
   }
}

class WindowsHook {
   __New(type, callback, eventInfo := "", isGlobal := true) {
      this.callbackPtr := RegisterCallback(callback, "Fast", 3, eventInfo)
      this.hHook := DllCall("SetWindowsHookEx", "Int", type, "Ptr", this.callbackPtr
                                              , "Ptr", !isGlobal ? 0 : DllCall("GetModuleHandle", "UInt", 0, "Ptr")
                                              , "UInt", isGlobal ? 0 : DllCall("GetCurrentThreadId"), "Ptr")
   }
   __Delete() {
      DllCall("UnhookWindowsHookEx", "Ptr", this.hHook)
      DllCall("GlobalFree", "Ptr", this.callBackPtr, "Ptr")
   }
}

HBitmapFromScreen(X, Y, W, H) {
   HDC := DllCall("GetDC", "Ptr", 0, "UPtr")
   HBM := DllCall("CreateCompatibleBitmap", "Ptr", HDC, "Int", W, "Int", H, "UPtr")
   PDC := DllCall("CreateCompatibleDC", "Ptr", HDC, "UPtr")
   DllCall("SelectObject", "Ptr", PDC, "Ptr", HBM)
   DllCall("BitBlt", "Ptr", PDC, "Int", 0, "Int", 0, "Int", W, "Int", H
                   , "Ptr", HDC, "Int", X, "Int", Y, "UInt", 0x00CC0020)
   DllCall("DeleteDC", "Ptr", PDC)
   DllCall("ReleaseDC", "Ptr", 0, "Ptr", HDC)
   Return HBM
}

HBitmapToRandomAccessStream(hBitmap) {
   static IID_IRandomAccessStream := "{905A0FE1-BC53-11DF-8C49-001E4FC686DA}"
        , IID_IPicture            := "{7BF80980-BF32-101A-8BBB-00AA00300CAB}"
        , PICTYPE_BITMAP := 1
        , BSOS_DEFAULT   := 0
        
   DllCall("Ole32\CreateStreamOnHGlobal", "Ptr", 0, "UInt", true, "PtrP", pIStream, "UInt")
   
   VarSetCapacity(PICTDESC, sz := 8 + A_PtrSize*2, 0)
   NumPut(sz, PICTDESC)
   NumPut(PICTYPE_BITMAP, PICTDESC, 4)
   NumPut(hBitmap, PICTDESC, 8)
   riid := CLSIDFromString(IID_IPicture, GUID1)
   DllCall("OleAut32\OleCreatePictureIndirect", "Ptr", &amp;PICTDESC, "Ptr", riid, "UInt", false, "PtrP", pIPicture, "UInt")
   ; IPicture::SaveAsFile
   DllCall(NumGet(NumGet(pIPicture+0) + A_PtrSize*15), "Ptr", pIPicture, "Ptr", pIStream, "UInt", true, "UIntP", size, "UInt")
   riid := CLSIDFromString(IID_IRandomAccessStream, GUID2)
   DllCall("ShCore\CreateRandomAccessStreamOverStream", "Ptr", pIStream, "UInt", BSOS_DEFAULT, "Ptr", riid, "PtrP", pIRandomAccessStream, "UInt")
   ObjRelease(pIPicture)
   ObjRelease(pIStream)
   Return pIRandomAccessStream
}

CLSIDFromString(IID, ByRef CLSID) {
   VarSetCapacity(CLSID, 16, 0)
   if res := DllCall("ole32\CLSIDFromString", "WStr", IID, "Ptr", &amp;CLSID, "UInt")
      throw Exception("CLSIDFromString failed. Error: " . Format("{:#x}", res))
   Return &amp;CLSID
}


ocr(file, lang := "FirstFromAvailableLanguages")
{
   static OcrEngineStatics, OcrEngine, MaxDimension, LanguageFactory, Language, CurrentLanguage, BitmapDecoderStatics, GlobalizationPreferencesStatics
   if (OcrEngineStatics = "")
   {
      CreateClass("Windows.Globalization.Language", ILanguageFactory := "{9B0252AC-0C27-44F8-B792-9793FB66C63E}", LanguageFactory)
      CreateClass("Windows.Graphics.Imaging.BitmapDecoder", IBitmapDecoderStatics := "{438CCB26-BCEF-4E95-BAD6-23A822E58D01}", BitmapDecoderStatics)
      CreateClass("Windows.Media.Ocr.OcrEngine", IOcrEngineStatics := "{5BFFA85A-3384-3540-9940-699120D428A8}", OcrEngineStatics)
      DllCall(NumGet(NumGet(OcrEngineStatics+0)+6*A_PtrSize), "ptr", OcrEngineStatics, "uint*", MaxDimension)   ; MaxImageDimension
   }
   if (file = "ShowAvailableLanguages")
   {
      if (GlobalizationPreferencesStatics = "")
         CreateClass("Windows.System.UserProfile.GlobalizationPreferences", IGlobalizationPreferencesStatics := "{01BF4326-ED37-4E96-B0E9-C1340D1EA158}", GlobalizationPreferencesStatics)
      DllCall(NumGet(NumGet(GlobalizationPreferencesStatics+0)+9*A_PtrSize), "ptr", GlobalizationPreferencesStatics, "ptr*", LanguageList)   ; get_Languages
      DllCall(NumGet(NumGet(LanguageList+0)+7*A_PtrSize), "ptr", LanguageList, "int*", count)   ; count
      loop % count
      {
         DllCall(NumGet(NumGet(LanguageList+0)+6*A_PtrSize), "ptr", LanguageList, "int", A_Index-1, "ptr*", hString)   ; get_Item
         DllCall(NumGet(NumGet(LanguageFactory+0)+6*A_PtrSize), "ptr", LanguageFactory, "ptr", hString, "ptr*", LanguageTest)   ; CreateLanguage
         DllCall(NumGet(NumGet(OcrEngineStatics+0)+8*A_PtrSize), "ptr", OcrEngineStatics, "ptr", LanguageTest, "int*", bool)   ; IsLanguageSupported
         if (bool = 1)
         {
            DllCall(NumGet(NumGet(LanguageTest+0)+6*A_PtrSize), "ptr", LanguageTest, "ptr*", hText)
            buffer := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hText, "uint*", length, "ptr")
            text .= StrGet(buffer, "UTF-16") "`n"
         }
         ObjRelease(LanguageTest)
      }
      ObjRelease(LanguageList)
      return text
   }
   if (lang != CurrentLanguage) or (lang = "FirstFromAvailableLanguages")
   {
      if (OcrEngine != "")
      {
         ObjRelease(OcrEngine)
         if (CurrentLanguage != "FirstFromAvailableLanguages")
            ObjRelease(Language)
      }
      if (lang = "FirstFromAvailableLanguages")
         DllCall(NumGet(NumGet(OcrEngineStatics+0)+10*A_PtrSize), "ptr", OcrEngineStatics, "ptr*", OcrEngine)   ; TryCreateFromUserProfileLanguages
      else
      {
         CreateHString(lang, hString)
         DllCall(NumGet(NumGet(LanguageFactory+0)+6*A_PtrSize), "ptr", LanguageFactory, "ptr", hString, "ptr*", Language)   ; CreateLanguage
         DeleteHString(hString)
         DllCall(NumGet(NumGet(OcrEngineStatics+0)+9*A_PtrSize), "ptr", OcrEngineStatics, ptr, Language, "ptr*", OcrEngine)   ; TryCreateFromLanguage
      }
      if (OcrEngine = 0)
      {
         msgbox Can not use language "%lang%" for OCR, please install language pack.
         ExitApp
      }
      CurrentLanguage := lang
   }
   IRandomAccessStream := file
   DllCall(NumGet(NumGet(BitmapDecoderStatics+0)+14*A_PtrSize), "ptr", BitmapDecoderStatics, "ptr", IRandomAccessStream, "ptr*", BitmapDecoder)   ; CreateAsync
   WaitForAsync(BitmapDecoder)
   BitmapFrame := ComObjQuery(BitmapDecoder, IBitmapFrame := "{72A49A1C-8081-438D-91BC-94ECFC8185C6}")
   DllCall(NumGet(NumGet(BitmapFrame+0)+12*A_PtrSize), "ptr", BitmapFrame, "uint*", width)   ; get_PixelWidth
   DllCall(NumGet(NumGet(BitmapFrame+0)+13*A_PtrSize), "ptr", BitmapFrame, "uint*", height)   ; get_PixelHeight
   if (width &gt; MaxDimension) or (height &gt; MaxDimension)
   {
      msgbox Image is to big - %width%x%height%.`nIt should be maximum - %MaxDimension% pixels
      ExitApp
   }
   BitmapFrameWithSoftwareBitmap := ComObjQuery(BitmapDecoder, IBitmapFrameWithSoftwareBitmap := "{FE287C9A-420C-4963-87AD-691436E08383}")
   DllCall(NumGet(NumGet(BitmapFrameWithSoftwareBitmap+0)+6*A_PtrSize), "ptr", BitmapFrameWithSoftwareBitmap, "ptr*", SoftwareBitmap)   ; GetSoftwareBitmapAsync
   WaitForAsync(SoftwareBitmap)
   DllCall(NumGet(NumGet(OcrEngine+0)+6*A_PtrSize), "ptr", OcrEngine, ptr, SoftwareBitmap, "ptr*", OcrResult)   ; RecognizeAsync
   WaitForAsync(OcrResult)
   DllCall(NumGet(NumGet(OcrResult+0)+6*A_PtrSize), "ptr", OcrResult, "ptr*", LinesList)   ; get_Lines
   DllCall(NumGet(NumGet(LinesList+0)+7*A_PtrSize), "ptr", LinesList, "int*", count)   ; count
   loop % count
   {
      DllCall(NumGet(NumGet(LinesList+0)+6*A_PtrSize), "ptr", LinesList, "int", A_Index-1, "ptr*", OcrLine)
      DllCall(NumGet(NumGet(OcrLine+0)+7*A_PtrSize), "ptr", OcrLine, "ptr*", hText) 
      buffer := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hText, "uint*", length, "ptr")
      text .= StrGet(buffer, "UTF-16") "`n"
      ObjRelease(OcrLine)
   }
   Close := ComObjQuery(IRandomAccessStream, IClosable := "{30D5A829-7FA4-4026-83BB-D75BAE4EA99E}")
   DllCall(NumGet(NumGet(Close+0)+6*A_PtrSize), "ptr", Close)   ; Close
   ObjRelease(Close)
   Close := ComObjQuery(SoftwareBitmap, IClosable := "{30D5A829-7FA4-4026-83BB-D75BAE4EA99E}")
   DllCall(NumGet(NumGet(Close+0)+6*A_PtrSize), "ptr", Close)   ; Close
   ObjRelease(Close)
   ObjRelease(IRandomAccessStream)
   ObjRelease(BitmapDecoder)
   ObjRelease(BitmapFrame)
   ObjRelease(BitmapFrameWithSoftwareBitmap)
   ObjRelease(SoftwareBitmap)
   ObjRelease(OcrResult)
   ObjRelease(LinesList)
   return text
}



CreateClass(string, interface, ByRef Class)
{
   CreateHString(string, hString)
   VarSetCapacity(GUID, 16)
   DllCall("ole32\CLSIDFromString", "wstr", interface, "ptr", &amp;GUID)
   result := DllCall("Combase.dll\RoGetActivationFactory", "ptr", hString, "ptr", &amp;GUID, "ptr*", Class)
   if (result != 0)
   {
      if (result = 0x80004002)
         msgbox No such interface supported
      else if (result = 0x80040154)
         msgbox Class not registered
      else
         msgbox error: %result%
      ExitApp
   }
   DeleteHString(hString)
}

CreateHString(string, ByRef hString)
{
    DllCall("Combase.dll\WindowsCreateString", "wstr", string, "uint", StrLen(string), "ptr*", hString)
}

DeleteHString(hString)
{
   DllCall("Combase.dll\WindowsDeleteString", "ptr", hString)
}

WaitForAsync(ByRef Object)
{
   AsyncInfo := ComObjQuery(Object, IAsyncInfo := "{00000036-0000-0000-C000-000000000046}")
   loop
   {
      DllCall(NumGet(NumGet(AsyncInfo+0)+7*A_PtrSize), "ptr", AsyncInfo, "uint*", status)   ; IAsyncInfo.Status
      if (status != 0)
      {
         if (status != 1)
         {
            DllCall(NumGet(NumGet(AsyncInfo+0)+8*A_PtrSize), "ptr", AsyncInfo, "uint*", ErrorCode)   ; IAsyncInfo.ErrorCode
            msgbox AsyncInfo status error: %ErrorCode%
            ExitApp
         }
         ObjRelease(AsyncInfo)
         break
      }
      sleep 10
   }
   DllCall(NumGet(NumGet(Object+0)+8*A_PtrSize), "ptr", Object, "ptr*", ObjectResult)   ; GetResults
   ObjRelease(Object)
   Object := ObjectResult
}</Item>
			<Item name="capture" tv="9707648">run,G:\我的AHK程序\我的工程\dxgi_pixelgetcolor
c =
(%
#include &lt;my_lib&gt;

;gdip startup
if !DllCall("kernel32\GetModuleHandle", Str,"gdiplus", Ptr)
	DllCall("kernel32\LoadLibrary", Str,"gdiplus", Ptr)
VarSetCapacity(GdiplusStartupInput, 16, 0), GdiplusStartupInput := Chr(1)
DllCall("gdiplus\GdiplusStartup", UPtrP,pToken, Ptr,&amp;GdiplusStartupInput, Ptr,0)

Gui +AlwaysOnTop -DPIScale
Gui Margin, 15, 15
Gui Add, Pic, HwndhPic w800 h800 +Border	;演示窗口大小
Gui Show,x1000 y10

;==============================
;from data
vSize := 14 + 40 + A_ScreenWidth * A_ScreenHeight * 4
dxgi_init(0)
rtn := dxgi_pixelgetcolor(0, 0, p_vitmap_file, p_bitmap_info , p_bitmap_data, is_time_out)
dxgi_save2file("test.bmp")
loop
{
    dxgi_pixelgetcolor(0, 0, p_vitmap_file, p_bitmap_info , p_bitmap_data, is_time_out)
    hBitmap := GDIPlus_hBitmapFromPoint(p_vitmap_file, vSize)
    Show(hPic, hBitmap, 0, 0, 800, 800)
    DllCall("DeleteObject", "ptr", hBitmap)
}
return

f5::
;gdip shutdown
DllCall("gdiplus\GdiplusShutdown", UPtr,pToken)
if hModule := DllCall("kernel32\GetModuleHandle", Str,"gdiplus", Ptr)
	DllCall("kernel32\FreeLibrary", Ptr,hModule)
;==============================
ExitApp
return

;==================================================
;GdiPlus_SaveImageToBuffer() - Scripts and Functions - AutoHotkey Community
;https://autohotkey.com/board/topic/85523-gdiplus-saveimagetobuffer/

GDIPlus_hBitmapFromPoint( ByRef Buffer, nSize ) { ;  Last Modifed : 21-Jun-2011
; Adapted version by SKAN www.autohotkey.com/forum/viewtopic.php?p=383863#383863
; Original code   by Sean www.autohotkey.com/forum/viewtopic.php?p=147029#147029
 hData := DllCall("GlobalAlloc", UInt,2, UInt,nSize )
 pData := DllCall("GlobalLock",  UInt,hData )
 DllCall( "RtlMoveMemory", UInt,pData, UInt,Buffer, UInt,nSize )
 DllCall( "GlobalUnlock" , UInt,hData )
 DllCall( "ole32\CreateStreamOnHGlobal", UInt,hData, Int,True, UIntP,pStream )
 DllCall( "gdiplus\GdipCreateBitmapFromStream",  UInt,pStream, UIntP,pBitmap )
 DllCall( "gdiplus\GdipCreateHBITMAPFromBitmap", UInt,pBitmap, UIntP,hBitmap, UInt
,DllCall( "ntdll\RtlUlongByteSwap",UInt
,DllCall( "GetSysColor", Int,15 ) &lt;&lt;8 ) | 0xFF000000 )
 DllCall( "gdiplus\GdipDisposeImage", UInt,pBitmap )
 DllCall( NumGet( NumGet(1*pStream)+8 ), UInt,pStream ) ; IStream::Release
 Dllcall("GlobalFree", "Ptr", hData)
Return hBitmap
}


GDIPlus_hBitmapFromBuffer( ByRef Buffer, nSize ) { ;  Last Modifed : 21-Jun-2011
; Adapted version by SKAN www.autohotkey.com/forum/viewtopic.php?p=383863#383863
; Original code   by Sean www.autohotkey.com/forum/viewtopic.php?p=147029#147029
 hData := DllCall("GlobalAlloc", UInt,2, UInt,nSize )
 pData := DllCall("GlobalLock",  UInt,hData )
 DllCall( "RtlMoveMemory", UInt,pData, UInt,&amp;Buffer, UInt,nSize )
 DllCall( "GlobalUnlock" , UInt,hData )
 DllCall( "ole32\CreateStreamOnHGlobal", UInt,hData, Int,True, UIntP,pStream )
 DllCall( "gdiplus\GdipCreateBitmapFromStream",  UInt,pStream, UIntP,pBitmap )
 DllCall( "gdiplus\GdipCreateHBITMAPFromBitmap", UInt,pBitmap, UIntP,hBitmap, UInt
,DllCall( "ntdll\RtlUlongByteSwap",UInt
,DllCall( "GetSysColor", Int,15 ) &lt;&lt;8 ) | 0xFF000000 )
 DllCall( "gdiplus\GdipDisposeImage", UInt,pBitmap )
 DllCall( NumGet( NumGet(1*pStream)+8 ), UInt,pStream ) ; IStream::Release
 Dllcall("GlobalFree", "Ptr", hData)
Return hBitmap
}

;----------------------
; 显示内存图像  By FeiYue
;----------------------
Show(hwnd, hBM, x1, y1, x2, y2) {
	x:=Min(x1,x2), y:=Min(y1,y2), w:=Abs(x2-x1)+1, h:=Abs(y2-y1)+1
	, hDC := DllCall("GetDC", "Ptr",hwnd, "Ptr")
	, mDC := DllCall("CreateCompatibleDC", "Ptr", hDC, "Ptr")
	, oBM := DllCall("SelectObject", "Ptr", mDC, "Ptr", hBM)
	rtn := DllCall("BitBlt", "Ptr", hDC, "Int",0, "Int",0, "Int",w, "Int",h, "Ptr",mDC, "Int",x, "Int",y, "UInt",0xCC0020)
	DllCall("SelectObject", "Ptr", mDC, "Ptr", oBM)
	, DllCall("ReleaseDC", "Ptr",hwnd, "Ptr",hDC)
	, DllCall("DeleteDC", "Ptr",mDC)
}
)
Clipboard := c</Item>
			<Item name="右键选择范围feiyue" tv="9708432">;------------------------------
; 右键选择屏幕范围   By FeiYue
;------------------------------

F1:: MsgBox, 4096,, % "选择的范围是：" 右键选择屏幕范围(x1,y1,x2,y2)

右键选择屏幕范围(ByRef x1="", ByRef y1="", ByRef x2="", ByRef y2="")
{
  KeyWait, RButton
  For k,v in StrSplit("RButton,Left,Right,Up,Down", ",")
    Hotkey, % v, GetRange_KeyOff, On
  if (0)
  {
    GetRange_KeyOff:
    return
  }
  Gui, GetRange: Destroy
  Gui, % "GetRange: +AlwaysOnTop -Caption +ToolWindow"
    . " +Hwndid -DPIScale +E0x08000000"
  ok:=0
  CoordMode, Mouse, Screen
  While !GetKeyState("Ctrl","P")
  {
    Sleep, 50
    ToolTip, 按右键拖选范围`n方向键微调位置`n再次点右键确定
    MouseGetPos, x2, y2
    if (ok=0)
    {
      if GetKeyState("RButton","P")
        ok:=1, x1:=x2, y1:=y2
    }
    else if (ok=1)
    {
      GetKeyState("Left","P")  &amp;&amp; x1--
      GetKeyState("Right","P") &amp;&amp; x1++
      GetKeyState("Up","P")    &amp;&amp; y1--
      GetKeyState("Down","P")  &amp;&amp; y1++
      w:=Floor(Abs(x1-x2)), h:=Floor(Abs(y1-y2))
      x:=Floor(Min(x1,x2)), y:=Floor(Min(y1,y2))
      d:=2, x-=d, y-=d, w+=2*d, h+=2*d, i:=w-d, j:=h-d
      s:="0-0 " (w "-0 ") (w "-" h) (" 0-" h) " 0-0  "
      . (d "-" d) " " (i "-" d) " " (i "-" j) " " (d "-" j) " " (d "-" d)
      WinSet, Region, %s%, ahk_id %id%
      Gui, GetRange: Color, % (A_MSec&lt;500 ? "Red":"Blue")
      Gui, GetRange: Show, NA x%x% y%y% w%w% h%h%
      if !GetKeyState("RButton","P")
        ok:=2
    }
    else if (ok=2)
    {
      GetKeyState("Left","P")  &amp;&amp; x--
      GetKeyState("Right","P") &amp;&amp; x++
      GetKeyState("Up","P")    &amp;&amp; y--
      GetKeyState("Down","P")  &amp;&amp; y++
      Gui, GetRange: Color, % (A_MSec&lt;500 ? "Red":"Blue")
      Gui, GetRange: Show, NA x%x% y%y%
      if GetKeyState("RButton","P")
        Break
    }
  }
  x1:=x+d, y1:=y+d, x2:=x+w-1-d, y2:=y+h-1-d
  Gui, GetRange: Destroy
  ToolTip
  KeyWait, RButton
  For k,v in StrSplit("RButton,Left,Right,Up,Down", ",")
    Hotkey, % v, Off
  return (x1 "," y1 "," x2 "," y2)
}
</Item>
			<Item name="外框高亮线条" tv="9706752">Outline := []
Outline[1] := new HighlightOutline("Blue", 128)
Outline[1].show(0, 0, 200, 200)
Outline[1].Destroy()
class HighlightOutline {
	__New(color="red", Transparent=255) {
		Loop 4 {
			Gui New, -Caption +AlwaysOnTop +ToolWindow HWNDhwnd -DPIScale +E0x20 +E0x00080000
			Gui Color, %color%
			DllCall("SetLayeredWindowAttributes", "Ptr", this[A_Index] := hwnd, "Uint", 0, "Uchar", Transparent, "int", 2)
		}
		this.top := this[1]
		, this.right := this[2]
		, this.bottom := this[3]
		, this.left := this[4]
		Gui % "Gui_Cheek_Number" A_DefaultGui ": Default"
	}
	
	Show(x1, y1, x2, y2, b=3) {
		Try {
			Gui % this.1 ":Show", % "NA x" x1-b " y" y1-b " w" x2-x1+b*2 " h" b
			Gui % this.2 ":Show", % "NA x" x2 " y" y1 " w" b " h" y2-y1	
			Gui % this.3 ":Show", % "NA x" x1-b " y" y2 " w" x2-x1+2*b " h" b
			Gui % this.4 ":Show", % "NA x" x1-b " y" y1 " w" b " h" y2-y1
		}
	}

	Hide() {
		Loop 4
			Try Gui % this[A_Index] ": Hide"
	}

	Destroy() {
		Loop 4
			Try Gui % this[A_Index] ": Destroy"
	}
}</Item>
			<Item name="进程间通信feiyue" tv="9707088">/*
====================================
  talk v1.2 - by Avi Aryan, FeiYue

  Licensed Under MIT License

  使用方法：
  1、两个脚本的开头都包含本库脚本：#Include %A_LineFile%\..\talk.ahk
  2、在一个脚本中新建一个通信对象：aaa := new talk("另一个脚本名")
  3、然后就可以用这个通信对象控制另一个脚本了：F1:: aaa.Pause()
====================================

s=
(%
return
bbb:
Critical
Loop {
  if Mod(A_Index,10)=1
    s:=123
  ToolTip % "111-" s
  Sleep, 100
}
)
talk_exec(s,"111")
aaa:=new talk("111 ahk_class AutoHotkeyGUI")
aaa.runlabel("bbb")
F1:: aaa.setvar("s",456)

*/

/*
Class talk
    Methods
        setvar(varname, value)    -    Set the var in a client script
        getvar(varname)    -    Get the value of var in a client script
        runlabel(label, wait:=0)    -    run a label in a client script
        suspend()    -    suspend a client script
        pause()    -    pause a client script
        reload()    -    reload a client script
        exitapp()    -    exitapp or exits a client script
    Return Values
        Except getvar() which returns the value, all other function returns whether they were successful or not
        Successful = 1
        Communication Request not accepted = 0
        (Client) Script not found = FAIL
*/

class talk {

    __New(WinTitle) {
        this.Script2 := WinTitle
        dhw := A_DetectHiddenWindows, tmm := A_TitleMatchMode
        DetectHiddenWindows On
        SetTitleMatchMode 2
        WinWait, %WinTitle%,, 3
        DetectHiddenWindows %dhw%
        SetTitleMatchMode %tmm%
    }

    wait() {
        lls:=A_ListLines=0 ? "Off" : "On"
        ListLines, Off
        while !talk.return
            sleep, 20
        talk.return := ""
        ListLines, %lls%
    }

    setvar(varname, value) {
        T := talk_send(this.Script2, "setvar", varname, value)
        this.wait()
        return T
    }

    getvar(varname) {
        talk_send(this.Script2, "getvar", varname)
        this.wait()
        return talk.returnValue
    }

    runlabel(label, wait:=0) {
        T := talk_send(this.Script2, "runlabel", label, wait)
        if (wait)
            this.wait()
        return T
    }

    suspend() {
        return talk_send(this.Script2, "suspend")
    }

    pause() {
        return talk_send(this.Script2, "pause")
    }

    reload() {
        return talk_send(this.Script2, "reload")
    }

    exitapp() {
        return talk_send(this.Script2, "exitapp")
    }
}

talk_send(WinTitle, String*) {
    local
    StringToSend:="ahk_id " A_ScriptHwnd "|"
    For k,v in String
        StringToSend.=StrReplace(StrReplace(v,"\","\0"),"|","\1") . "|"
    SizeInBytes := (StrLen(StringToSend) + 1) * (A_IsUnicode ? 2 : 1)
    VarSetCapacity(CopyDataStruct, 3*A_PtrSize, 0)
    NumPut(SizeInBytes, CopyDataStruct, A_PtrSize)
    NumPut(&amp;StringToSend, CopyDataStruct, 2*A_PtrSize)
    dhw := A_DetectHiddenWindows, tmm := A_TitleMatchMode
    DetectHiddenWindows On
    SetTitleMatchMode 2
    SendMessage, 0x4a, 0, &amp;CopyDataStruct,, %WinTitle%
    DetectHiddenWindows %dhw%
    SetTitleMatchMode %tmm%
    return ErrorLevel
}

talk_receive(wParam, lParam) {
    local
    global talk
    static init:=OnMessage(0x4a, Func("talk_receive"))
    static run_label, run_wait, run_script2
    Critical
    ;-- SenderScriptHwnd|Cmd|Data1|Data2
    r:=StrSplit( StrGet( NumGet(lParam+2*A_PtrSize) ), "|")
    Script2:=StrReplace(StrReplace(r[1],"\1","|"),"\0","\")
    Cmd    :=StrReplace(StrReplace(r[2],"\1","|"),"\0","\")
    Data1  :=StrReplace(StrReplace(r[3],"\1","|"),"\0","\")
    Data2  :=StrReplace(StrReplace(r[4],"\1","|"),"\0","\")
    if (Cmd="return")
    {
        talk.return := 1, talk.returnValue := Data2
        return
    }
    else if (Cmd="setvar")
    {
        talk_setvar(Data1, Data2)
        talk_send(Script2, "return", "setvar")
        return
    }
    else if (Cmd="getvar")
    {
        talk_send(Script2, "return", "getvar", talk_getvar(Data1))
        return
    }
    else if (Cmd="runlabel")
    {
        run_label:=Data1, run_wait:=Data2, run_script2:=Script2
        SetTimer, talk_runlabel, -1
        return
        talk_runlabel:
        if IsLabel(run_label)
            Gosub, %run_label%
        if (run_wait)
            talk_send(run_script2, "return", "runlabel")
        return
    }
    else if (Cmd="suspend")
    {
        Suspend
        return
    }
    else if (Cmd="pause")
    {
        Pause,, 1
        return
    }
    else if (Cmd="reload")
    {
        Reload
        Sleep, 1000
        return
    }
    else if (Cmd="exitapp")
    {
        ExitApp
        return
    }
}

talk_setvar(___varname___, ByRef ___value___) {
    global
    Try %___varname___% := ___value___
}

talk_getvar(___varname___) {
    global
    Try return (%___varname___%)
}

talk_exec(script, title:="") {
    local
    s1:="`n title=" . title
    . "`n #NoEnv"
    . "`n; #NoTrayIcon"
    . "`n Suspend, On"
    . "`n SetTitleMatchMode, 2"
    . "`n DetectHiddenWindows, On"
    . "`n Gui, Gui_Title_Gui: Show, Hide, &lt;&lt;%title%&gt;&gt;"
    . "`n Gui, Gui_Title_Gui: +Hwndmyid"
    . "`n WinGet, list, List, &lt;&lt;%title%&gt;&gt; ahk_class AutoHotkeyGUI"
    . "`n Loop, % list {"
    . "`n     IfEqual, myid, % id:=list%A_Index%, Continue"
    . "`n     WinGet, pid, PID, ahk_id %id%"
    . "`n     WinClose, ahk_pid %pid% ahk_class AutoHotkey,, 2"
    . "`n     IfWinExist, ahk_id %id%,, Process, Close, %pid%"
    . "`n }"
    FileRead, s2, %A_LineFile%
    s2:=RegExReplace(s2,"i)^[\s\S]*?(?=class talk {\s)")
    script:=RegExReplace(s1 "`n" script "`nExitApp`n" s2,"\R","`r`n")
    ;-------------------------
    shell:=ComObjCreate("WScript.Shell")
    exec:=shell.Exec(A_AhkPath " /f *")
    exec.StdIn.Write(script)
    exec.StdIn.Close()
}
</Item>
			<Item name="单进程运行函数feiyue" tv="9708992">;-----------------------------
;  单进程运行函数  By FeiYue
;
;  用法：把本函数丢到任何脚本中，设定标记即可（修改001）
;-----------------------------

; 例子：同时启动10个本脚本，只会保留1个进程
#SingleInstance Off
MsgBox, 4096,, % A_Now
return

;-- 单进程运行函数  By FeiYue
OnlyOne(flag="") {
  static init:=OnlyOne("001")
  DetectHiddenWindows, % (bak:=A_DetectHiddenWindows) ? "On":"On"
  mypid:=DllCall("GetCurrentProcessId")
  flag:="Ahk_OnlyOne_Ahk&lt;&lt;" . flag . "&gt;&gt;"
  Gui, Ahk_OnlyOne_Ahk: Show, Hide, %flag%
  WinGet, list, List, %flag% ahk_class AutoHotkeyGUI
  Loop, % list
  IfWinExist, % "ahk_id " . list%A_Index%
  {
    WinGet, pid, PID
    IfEqual, pid, %mypid%, Continue
    WinClose, ahk_pid %pid% ahk_class AutoHotkey,, 3
    IfWinNotExist,,, Continue
    Process, Close, %pid%
    WinWaitClose
  }
  WinGet, list, List, %flag% ahk_class AutoHotkeyGUI
  IfNotEqual, list, 1, ExitApp
  DetectHiddenWindows, %bak%
}
</Item>
			<Item name="获取IP板卡等" tv="9707424">obj:=[],result:=""
obj.InsertAt(1,ComInfo.GetIPAPI_2(),ComInfo.GetMacAddress_1(),ComInfo.GetIPAddress_1(),ComInfo.GetSNCode(),[ComInfo.GetCpuID_3()])
for Section,element In obj
{
	Info:=""
	for key,value in element
	{
		if IsObject(value){
			Loop,% ObjLength(value)
				Info.=value[A_Index] " "
		}Else
			Info.=value " "
	}
	result.=Trim(Info) "`r`n"
}
MsgBox % result
Class ComInfo
{
	/*
		;http://pv.sohu.com/cityjson?ie=utf-8
		    ;返回值{"cip":"xxx","cid":"xxx","cname":"xxx"}
		    ;cip：ip地址
		    ;cid：邮编
		    ;cname：归属地
		;能获取外网ip的接口：
		;http://members.3322.org/dyndns/getip    ;直接返回ip
		;https://api.ipify.org/    ;直接返回ip
		;http://icanhazip.com/    ;直接返回ip
		;http://ident.me/    ;直接返回ip
		;http://ip.cip.cc/    ;直接返回ip
		;http://ip.qaros.com/    ;直接返回ip
		;https://api.ip.sb/ip    ;直接返回ip
		;http://ip.3322.net/    ;直接返回ip
		;http://ip.42.pl/raw    ;直接返回ip
		;https://www.fbisb.com/ip.php
		;http://myip.ipip.net/json    ;返回json格式参数如下：
			{"ret":"ok"
			,"data":
				{"ip":"59.173.134.130"
				,"location":["中国","xx省","xx","","电信"]}}
		;http://ip-api.com/json/?fields=520191&amp;lang=zh-CN    ;返回json格式参数如下:
			{"status":"success","country":"中国"
			,"countryCode":"CN","region":"HB"
			,"regionName":"xx省","city":"xx市"
			,"zip":"","lat":30.5856,"lon":114.2665
			,"timezone":"Asia/Shanghai","isp":"Chinanet"
			,"org":"Chinanet HB","as":"AS4134 CHINANET-BACKBONE"
			,"mobile":false,"proxy":false,"accuracy":10
			,"query":"171.113.255.124"
		;https://api.ttt.sh/ip/qqwry/    返回json格式参数如下：
			{"code":200,"ip":"171.113.255.124"
			,"address":"\u6e56\u5317\u7701 \u7535\u4fe1"
			,"date":"2020-06-23 10:09:40"}
		;http://whois.pconline.com.cn/ipJson.jsp?json=true    返回json格式参数如下：
			{"ip":"171.113.255.124","pro":"xx省"
			,"proCode":"420000","city":"xx市"
			,"cityCode":"420100","region":""
			,"regionCode":"0","addr":"xx省xx市 电信"
			,"regionNames":"","err":""}
	*/
	;获取本机外网IP①
	GetIPAPI(url:="http://pv.sohu.com/cityjson?ie=utf-8") {
		/*
		;	;~ 测试网络连接
		;	if(!DllCall("Wininet.dll\InternetCheckConnection", "Ptr", &amp;Url, "UInt", 0x1, "UInt", 0x0, "Int"))
		;		return []
		;	iHTTP := ComObjCreate("WinHttp.WinHttpRequest.5.1")
		;	iHTTP.Open("Get", URL , False)
		;	iHTTP.SetRequestHeader("User-Agent", "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)")
		;	iHTTP.SetRequestHeader("Referer", URL)
		;	iHTTP.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded")
		;	iHTTP.Send()
		;	RegExMatch(iHTTP.ResponseText,"\{.+\}",ipobj)   ;iHTTP.ResponseText为接收的结果
		;	iJson:= Json_toObj(ipobj)
		;	return [ iJson["cip"], iJson["cname"],"〔 " iJson["cname"] " 〕"]
		*/
		if ipobj:=this.UrlDownloadToVars(url,,,,,,,,,3){   ;设定超时时长
			RegExMatch(ipobj,"\{.+\}",obj)
			iJson:= Json_toObj(obj)
			return [ iJson["cip"],"〔 " iJson["cname"] " 〕"]
		}
	}
	;获取本机外网IP②
	GetIPAPI_1(url:="http://myip.ipip.net/json") {
		if ipobj:=this.UrlDownloadToVars(url,,,,,,,,,3){   ;设定超时时长
			iJson:= Json_toObj(ipobj)
			ipLocal:= iJson["data","location"][1] iJson["data","location"][2] iJson["data","location"][3] iJson["data","location"][5]
			return [ iJson["data","ip"]," 〔 " ipLocal " 〕"]
		}
	}
	;获取本机外网IP③
	GetIPAPI_2(url:="http://whois.pconline.com.cn/ipJson.jsp?json=true") {
		if ipobj:=this.UrlDownloadToVars(url,,,,,,,,,3){   ;设定超时时长
			iJson:= Json_toObj(ipobj)
			ipLocal:= iJson["pro"] iJson["city"] "-" iJson["addr"]
			return [ iJson["ip"]," 〔 " ipLocal " 〕"]
		}
	}
	;获取本机外网IP④
	GetIPAPI_3(url:="https://api.ttt.sh/ip/qqwry/") {
		if ipobj:=this.UrlDownloadToVars(url,,,,,,,,,3){   ;设定超时时长
			iJson:= Json_toObj(ipobj)
			return [ iJson["ip"]," 〔 " iJson["address"] " 〕"]
		}
	}
	;获取设备型号
	GetMacName(){
		;https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/win32-computersystemproduct
		objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . "." . "\root\cimv2")
		colSysProduct := objWMIService.ExecQuery("Select * From Win32_ComputerSystemProduct")._NewEnum
		while,colSysProduct[objSysProduct]   ;PropertyList&gt;&gt;["Caption,Description,IdentifyingNumber,Name,SKUNumber,UUID,Vendor,Version"]
		{
			return [objSysProduct["Name"]," 〔 设备品牌型号 〕"]
		}
	}
	;获取网卡物理地址
	GetMacAddress(){
		;https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/win32-networkadapterconfiguration
		NetworkConfiguration:=ComObjGet("Winmgmts:").InstancesOf("Win32_NetworkAdapterConfiguration")
		for mo in NetworkConfiguration
		{
			if(mo.IPEnabled &lt;&gt; 0)
				return mo.MacAddress
		}
	}
	;获取网卡物理地址
	GetMacAddress_1(){
		Adlist:=[], info:=this.GetAdaptersInfo()
		for index, obj in info
		{
			if (not obj["Description"] ~="i)Adapter"||obj["Description"] ~="i)Wifi|wlan"){
				Adlist.Push([obj["Address"] ," 〔" obj["Description"] "〕"])
			}
		}
		return Adlist
	}
	;获取IP地址
	GetIPAddress_1(){
		Adlist:=[], info:=this.GetAdaptersInfo()
		for index, obj in info
		{
			if (not obj["Description"] ~="i)Adapter"&amp;&amp;obj["IpAddressList"]&lt;&gt;"0.0.0.0"||obj["Description"] ~="i)Wifi|wlan"&amp;&amp;obj["IpAddressList"]&lt;&gt;"0.0.0.0")
				Adlist.Push([obj["IpAddressList"] ," 〔" . obj["Description"] . "〕"])
		}
		return Adlist
	}
	;获取CPU串号
	GetCpuID_1(){
		;https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-processor
		objSWbemObject:=ComObjGet("winmgmts:Win32_Processor.DeviceID='cpu0'")
		return objSWbemObject.ProcessorId
	}
	;获取CPU串号
	GetCpuID_3(){
		;https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-processor
		objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . A_ComputerName . "\root\cimv2")
		colCPU := objWMIService.ExecQuery("Select * From Win32_Processor")._NewEnum
		While colCPU[objCPU]
			return objCPU["ProcessorId"]    ;Name获取cpu名称
	}
	;获取系统版本信息
	GetOSVersionInfo()
	{
		;https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/win32-operatingsystem?redirectedfrom=MSDN
		osobj := ComObjGet("winmgmts:").ExecQuery("Select * from Win32_OperatingSystem" )._NewEnum()
		if osobj[win]
			return [win.Caption,win.Version,win.Version]
	}
	;返回当前电脑BIOS里的SN机器码
	GetSNCode(){
		;https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/win32-bios
		objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . "." . "\root\cimv2")
		colSettings := objWMIService.ExecQuery("Select * from Win32_BIOS")._NewEnum
		While colSettings[objBiosItem]
			return [objBiosItem.SerialNumber ," 〔 设备S/N序列号 〕"]
	}
	;返回当前电脑BIOS里的SN机器码
	GetSNCode_1(){
		;https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/win32-computersystemproduct
		objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . "." . "\root\cimv2")
		colSysProduct := objWMIService.ExecQuery("Select * From Win32_ComputerSystemProduct")._NewEnum
		while,colSysProduct[objSysProduct]   ;PropertyList&gt;&gt;["Caption,Description,IdentifyingNumber,Name,SKUNumber,UUID,Vendor,Version"]
		{
			return [objSysProduct["IdentifyingNumber"] ," 〔 设备S/N序列号 〕"]
		}
	}
	;获取网卡mac地址
	GetAdaptersInfo(){
		; 对GetAdaptersInfo的初始调用以获取所需的大小
		if (DllCall("iphlpapi.dll\GetAdaptersInfo", "ptr", 0, "UIntP", size) = 111) ; ERROR_BUFFER_OVERFLOW
			if !(VarSetCapacity(buf, size, 0))  ; size ==&gt;  1x = 704  |  2x = 1408  |  3x = 2112
				return "IP适配器信息结构的内存分配失败！"
		; 第二次调用GetAdapters地址以获取我们想要的实际数据
		if (DllCall("iphlpapi.dll\GetAdaptersInfo", "ptr", &amp;buf, "UIntP", size) != 0) ; NO_ERROR / ERROR_SUCCESS
			return "调用GetAdaptersInfo失败，ERROR: " A_LastError
		; 从数据中获取信息
		addr := &amp;buf, IP_ADAPTER_INFO := {}
		while (addr)
		{
			IP_ADAPTER_INFO[A_Index, "ComboIndex"]:= NumGet(addr+0, o := A_PtrSize, "UInt"), o += 4
			IP_ADAPTER_INFO[A_Index, "AdapterName"]:= StrGet(addr+0 + o, 260, "CP0"), o += 260
			IP_ADAPTER_INFO[A_Index, "Description"]:= StrGet(addr+0 + o, 132, "CP0"), o += 132
			IP_ADAPTER_INFO[A_Index, "AddressLength"]:= NumGet(addr+0, o, "UInt"), o += 4
			loop % IP_ADAPTER_INFO[A_Index].AddressLength
				mac .= Format("{:02X}",NumGet(addr+0, o + A_Index - 1, "UChar")) "-"
			IP_ADAPTER_INFO[A_Index, "Address"]:= SubStr(mac, 1, -1), mac := "", o += 8
			IP_ADAPTER_INFO[A_Index, "Index"]:= NumGet(addr+0, o, "UInt"), o += 4
			IP_ADAPTER_INFO[A_Index, "Type"]:= NumGet(addr+0, o, "UInt"), o += 4
			IP_ADAPTER_INFO[A_Index, "DhcpEnabled"]:= NumGet(addr+0, o, "UInt"), o += A_PtrSize
			Ptr := NumGet(addr+0, o, "UPtr"), o += A_PtrSize
			IP_ADAPTER_INFO[A_Index, "CurrentIpAddress"]:= Ptr ? StrGet(Ptr + A_PtrSize, "CP0") : ""
			IP_ADAPTER_INFO[A_Index, "IpAddressList"]:= StrGet(addr + o + A_PtrSize, "CP0")
			;~ IP_ADAPTER_INFO[A_Index, "IpMaskList"]:= StrGet(addr + o + A_PtrSize + 16, "CP0") , o += A_PtrSize + 32 + A_PtrSize
			IP_ADAPTER_INFO[A_Index, "IpMaskList"]:= StrGet(addr + o + A_PtrSize * 3, "CP0") , o += A_PtrSize + 32 + A_PtrSize
			IP_ADAPTER_INFO[A_Index, "GatewayList"]:= StrGet(addr + o + A_PtrSize, "CP0"), o += A_PtrSize + 32 + A_PtrSize
			IP_ADAPTER_INFO[A_Index, "DhcpServer"]:= StrGet(addr + o + A_PtrSize, "CP0"), o += A_PtrSize + 32 + A_PtrSize
			IP_ADAPTER_INFO[A_Index, "HaveWins"]:= NumGet(addr+0, o, "Int"), o += A_PtrSize
			IP_ADAPTER_INFO[A_Index, "PrimaryWinsServer"]:= StrGet(addr + o + A_PtrSize, "CP0"), o += A_PtrSize + 32 + A_PtrSize
			IP_ADAPTER_INFO[A_Index, "SecondaryWinsServer"] := StrGet(addr + o + A_PtrSize, "CP0"), o += A_PtrSize + 32 + A_PtrSize
			IP_ADAPTER_INFO[A_Index, "LeaseObtained"]:= this.DateAdd(NumGet(addr+0, o, "Int")), o += A_PtrSize
			IP_ADAPTER_INFO[A_Index, "LeaseExpires"]:= this.DateAdd(NumGet(addr+0, o, "Int"))
			addr := NumGet(addr+0, "UPtr")
		}
		; 输出数据并释放缓冲区
		return IP_ADAPTER_INFO, VarSetCapacity(buf, 0), VarSetCapacity(addr, 0)
	}
	;~ *****************说明*****************
	;~ 此函数与内置命令 UrlDownloadToFile 的区别有以下几点
	;~ 1.直接下载到变量，没有临时文件
	;~ 2.下载速度更快，大概100%
	;~ 3.支持超时，不必死等
	;~ 4.内置命令执行时，整个AHK程序都是卡顿状态。此函数不会
	;~ 5.内置命令下载一些诡异网站（例如“牛杂网”）时，会概率性让进程或线程彻底死掉。此函数不会
	;~ 6.支持设置网页字符集、URL的编码，乱码问题轻松解决
	;~ 7.支持设置Cookie、Referer、User-Agent，网站检测问题轻松解决
	;~ 8.支持设置代理服务器
	;~ 9.支持设置是否开启重定向
	;~ 10.这个版本是 0.5
	;~ *****************参数*****************
	;~ URL 网址，必须包含类似“http://www.”的开头。
	;~ Charset 网页字符集，不能是“936”之类的数字，必须是“gb2312”这样的字符。
	;~ URLCodePage URL的编码，是“936”之类的数字，默认是“65001”。有些网站需要UTF-8，有些网站又需要gb2312
	;~ Proxy 代理服务器，是形如“http://www.tuzi.com:80”的字符。
	;~ ProxyBypassList 代理服务器绕行名单，是形如“*.microsoft.com”的域名。符合域名的网址，将不通过代理服务器访问。
	;~ Cookie ，常用于登录验证。
	;~ Referer 引用网址，常用于防盗链。
	;~ UserAgent 用户信息，常用于防盗链。
	;~ EnableRedirects 重定向，默认获取跳转后的页面信息，0为不跳转。
	;~ Timeout 超时，单位为秒，默认不使用超时（Timeout=-1）。
	UrlDownloadToVars(URL,Charset="",URLCodePage="",Proxy="",ProxyBypassList="",Cookie="",Referer="",UserAgent="",EnableRedirects="",Timeout=-1)
	{
		ComObjError(0)  ;禁用 COM 错误通告。禁用后，检查 A_LastError 的值，脚本可以实现自己的错误处理
		WebRequest := ComObjCreate("WinHttp.WinHttpRequest.5.1")
		if (URLCodePage&lt;&gt;"")    ;设置URL的编码
			WebRequest.Option(2):=URLCodePage
		if (EnableRedirects&lt;&gt;"")
			WebRequest.Option(6):=EnableRedirects
		if (Proxy&lt;&gt;"")  ;设置代理服务器。微软的代码 SetProxy() 是放在 Open() 之前的，所以我也放前面设置，以免无效
			WebRequest.SetProxy(2,Proxy,ProxyBypassList)
		WebRequest.Open("GET", URL, true)   ;true为异步获取，默认是false。龟速的根源！！！卡顿的根源！！！
		if (Cookie&lt;&gt;"") ;设置Cookie。SetRequestHeader() 必须 Open() 之后才有效
		{
			WebRequest.SetRequestHeader("Cookie","tuzi")    ;先设置一个cookie，防止出错，见官方文档
			WebRequest.SetRequestHeader("Cookie",Cookie)
		}
		if (Referer&lt;&gt;"")    ;设置Referer
			WebRequest.SetRequestHeader("Referer",Referer)
		if (UserAgent&lt;&gt;"")  ;设置User-Agent
			WebRequest.SetRequestHeader("User-Agent",UserAgent)
		WebRequest.Send()
		WebRequest.WaitForResponse(Timeout) ;WaitForResponse方法确保获取的是完整的响应
		if (Charset="") ;设置字符集
			return,RegExReplace(WebRequest.ResponseText(),"^\s+|\s+$")
		else
		{
			ADO:=ComObjCreate("adodb.stream")   ;使用 adodb.stream 编码返回值。参考 http://bbs.howtoadmin.com/ThRead-814-1-1.html
			ADO.Type:=1 ;以二进制方式操作
			ADO.Mode:=3 ;可同时进行读写
			ADO.Open()  ;开启物件
			ADO.Write(WebRequest.ResponseBody())    ;写入物件。注意 WebRequest.ResponseBody() 获取到的是无符号的bytes，通过 adodb.stream 转换成字符串string
			ADO.Position:=0 ;从头开始
			ADO.Type:=2 ;以文字模式操作
			ADO.Charset:=Charset    ;设定编码方式
			return,RegExReplace(ADO.ReadText(),"^\s+|\s+$")   ;将物件内的文字读出
		}
	}
	DateAdd(time)
	{
		if (time = 0)
			return 0
		datetime := 19700101
		datetime += time, s
		FormatTime, OutputVar, datetime, yyyy-MM-dd HH:mm:ss
		return OutputVar
	}
}
Json_toObj(ByRef src, args*)
{
	static q := Chr(34)
	key := "", is_key := false
	stack := [ tree := [] ]
	is_arr := { (tree): 1 }
	next := q . "{[01234567890-tfn"
	pos := 0
	while ( (ch := SubStr(src, ++pos, 1)) != "" )
	{
		if InStr(" `t`n`r", ch)
			continue
		if !InStr(next, ch, true)
		{
			ln := ObjLength(StrSplit(SubStr(src, 1, pos), "`n"))
			col := pos - InStr(src, "`n",, -(StrLen(src)-pos+1))
			msg := Format("{}: line {} col {} (char {})"
			,   (next == "")      ? ["Extra data", ch := SubStr(src, pos)][1]
			  : (next == "'")     ? "Unterminated string starting at"
			  : (next == "\")     ? "Invalid \escape"
			  : (next == ":")     ? "Expecting ':' delimiter"
			  : (next == q)       ? "Expecting object key enclosed in double quotes"
			  : (next == q . "}") ? "Expecting object key enclosed in double quotes or object closing '}'"
			  : (next == ",}")    ? "Expecting ',' delimiter or object closing '}'"
			  : (next == ",]")    ? "Expecting ',' delimiter or array closing ']'"
			  : [ "Expecting JSON value(string, number, [true, false, null], object or array)"
			    , ch := SubStr(src, pos, (SubStr(src, pos)~="[\]\},\s]|$")-1) ][1]
			, ln, col, pos)
			throw Exception(msg, -1, ch)
		}
		is_array := is_arr[obj := stack[1]]
		if i := InStr("{[", ch)
		{
			val := (proto := args[i]) ? new proto : {}
			is_array? ObjPush(obj, val) : obj[key] := val
			ObjInsertAt(stack, 1, val)
			is_arr[val] := !(is_key := ch == "{")
			next := q . (is_key ? "}" : "{[]0123456789-tfn")
		}
		else if InStr("}]", ch)
		{
			ObjRemoveAt(stack, 1)
			next := stack[1]==tree ? "" : is_arr[stack[1]] ? ",]" : ",}"
		}
		else if InStr(",:", ch)
		{
			is_key := (!is_array &amp;&amp; ch == ",")
			next := is_key ? q : q . "{[0123456789-tfn"
		}
		else ; string | number | true | false | null
		{
			if (ch == q) ; string
			{
				i := pos
				while i := InStr(src, q,, i+1)
				{
					val := StrReplace(SubStr(src, pos+1, i-pos-1), "\\", "\u005C")
					static end := A_AhkVersion&lt;"2" ? 0 : -1
					if (SubStr(val, end) != "\")
						break
				}
				if !i ? (pos--, next := "'") : 0
					continue
				pos := i ; update pos
				  val := StrReplace(val,    "\/",  "/")
				, val := StrReplace(val, "\" . q,    q)
				, val := StrReplace(val,    "\b", "`b")
				, val := StrReplace(val,    "\f", "`f")
				, val := StrReplace(val,    "\n", "`n")
				, val := StrReplace(val,    "\r", "`r")
				, val := StrReplace(val,    "\t", "`t")
				i := 0
				while i := InStr(val, "\",, i+1)
				{
					if (SubStr(val, i+1, 1) != "u") ? (pos -= StrLen(SubStr(val, i)), next := "\") : 0
						continue 2
					; \uXXXX - JSON unicode escape sequence
					xxxx := Abs("0x" . SubStr(val, i+2, 4))
					if (A_IsUnicode || xxxx &lt; 0x100)
						val := SubStr(val, 1, i-1) . Chr(xxxx) . SubStr(val, i+6)
				}
				if is_key
				{
					key := val, next := ":"
					continue
				}
			}
			else ; number | true | false | null
			{
				val := SubStr(src, pos, i := RegExMatch(src, "[\]\},\s]|$",, pos)-pos)
				static null := "" ; for #Warn
				if InStr(",true,false,null,", "," . val . ",", true) ; if var in
					val := %val%
				else if (Abs(val) == "") ? (pos--, next := "#") : 0
					continue
				val := val + 0, pos += i-1
			}
			is_array? ObjPush(obj, val) : obj[key] := val
			next := obj==tree ? "" : is_array ? ",]" : ",}"
		}
	}
	return tree[1]
}</Item></Item>
		<Item name="例子" tv="9705968">
			<Item name="scp顺序更新" tv="9707760">噜啦噜啦嘞</Item>
			<Item name="customtooltip" tv="9709104">title := "Hello,"
text := "This is my custom ToolTip!`nIt will disappear in five seconds."

hToolTip := CustomToolTip(text,,, title, 1, true, 0xFFC141, 0x50669F, "Calibri", "s18", true, 5000)
                          
Timer := Func("UpdateText").Bind(hToolTip, [ StrReplace(text, "five seconds", "one second")
                                              , StrReplace(text, "five", "two")
                                              , StrReplace(text, "five", "three")
                                              , StrReplace(text, "five", "four") ])
SetTimer, % Timer, 1000
Return

CustomToolTip( text, x := "", y := "", title := ""
             , icon := 0  ; can be 1 — Info, 2 — Warning, 3 — Error, if greater than 3 — hIcon
             , closeButton := false, backColor := "", textColor := 0
             , fontName := "", fontOptions := ""  ; like in GUI
             , isBallon := false, timeout := "", maxWidth := 600 )
{
   static ttStyles := (TTS_NOPREFIX := 2) | (TTS_ALWAYSTIP := 1), TTS_BALLOON := 0x40, TTS_CLOSE := 0x80
        , TTF_TRACK := 0x20, TTF_ABSOLUTE := 0x80
        , TTM_SETMAXTIPWIDTH := 0x418, TTM_TRACKACTIVATE := 0x411, TTM_TRACKPOSITION := 0x412
        , TTM_SETTIPBKCOLOR := 0x413, TTM_SETTIPTEXTCOLOR := 0x414
        , TTM_ADDTOOL        := A_IsUnicode ? 0x432 : 0x404
        , TTM_SETTITLE       := A_IsUnicode ? 0x421 : 0x420
        , TTM_UPDATETIPTEXT  := A_IsUnicode ? 0x439 : 0x40C
        , exStyles := (WS_EX_TOPMOST := 0x00000008) | (WS_EX_COMPOSITED := 0x2000000) | (WS_EX_LAYERED := 0x80000)
        , WM_SETFONT := 0x30, WM_GETFONT := 0x31
   
   dhwPrev := A_DetectHiddenWindows, defGuiPrev := A_DefaultGui, lastFoundPrev := WinExist()
   DetectHiddenWindows, On
   hWnd := DllCall("CreateWindowEx", "UInt", exStyles, "Str", "tooltips_class32", "Str", ""
                                   , "UInt", ttStyles | TTS_CLOSE * !!CloseButton | TTS_BALLOON * !!isBallon
                                   , "Int", 0, "Int", 0, "Int", 0, "Int", 0, "Ptr", 0, "Ptr", 0, "Ptr", 0, "Ptr", 0, "Ptr")
   WinExist("ahk_id" . hWnd)
   if (textColor != 0 || backColor != "") {
      DllCall("UxTheme\SetWindowTheme", "Ptr", hWnd, "Ptr", 0, "UShortP", empty := 0)
      ByteSwap := Func("DllCall").Bind("msvcr100\_byteswap_ulong", "UInt")
      SendMessage, TTM_SETTIPBKCOLOR  , ByteSwap.Call(backColor &lt;&lt; 8)
      SendMessage, TTM_SETTIPTEXTCOLOR, ByteSwap.Call(textColor &lt;&lt; 8)
   }
   if (fontName || fontOptions) {
      Gui, New
      Gui, Font, % fontOptions, % fontName
      Gui, Add, Text, hwndhText
      SendMessage, WM_GETFONT,,,, ahk_id %hText%
      SendMessage, WM_SETFONT, ErrorLevel
      Gui, Destroy
      Gui, %defGuiPrev%: Default
   }
   VarSetCapacity(TOOLINFO, sz := 24 + A_PtrSize*6, 0)
   NumPut(sz, TOOLINFO)
   NumPut(TTF_TRACK | TTF_ABSOLUTE * !isBallon, TOOLINFO, 4)
   NumPut(&amp;text, TOOLINFO, 24 + A_PtrSize*3)
   
   if (x = "" || y = "")
      DllCall("GetCursorPos", "Int64P", pt)
   (x = "" &amp;&amp; x := (pt &amp; 0xFFFFFFFF) + 15), (y = "" &amp;&amp; y := (pt &gt;&gt; 32) + 15)
   
   SendMessage, TTM_SETTITLE      , icon, &amp;title
   SendMessage, TTM_TRACKPOSITION ,     , x | (y &lt;&lt; 16)
   SendMessage, TTM_SETMAXTIPWIDTH,     , maxWidth
   SendMessage, TTM_ADDTOOL       ,     , &amp;TOOLINFO
   SendMessage, TTM_UPDATETIPTEXT ,     , &amp;TOOLINFO
   SendMessage, TTM_TRACKACTIVATE , true, &amp;TOOLINFO
   
   if timeout {
      Timer := Func("DllCall").Bind("DestroyWindow", "Ptr", hWnd)
      SetTimer, % Timer, % "-" . timeout
   }
   DetectHiddenWindows, % dhwPrev
   WinExist("ahk_id" . lastFoundPrev)
   Return hWnd
}

UpdateText(hTooltip, TextArray) {
   static TTM_UPDATETIPTEXT := A_IsUnicode ? 0x439 : 0x40C
   text := TextArray.Pop()
   VarSetCapacity(TOOLINFO, sz := 24 + A_PtrSize*6, 0)
   NumPut(sz, TOOLINFO)
   NumPut(&amp;text, TOOLINFO, 24 + A_PtrSize*3)
   SendMessage, TTM_UPDATETIPTEXT,, &amp;TOOLINFO,, ahk_id %hTooltip%
   if (TextArray[1] = "")
      SetTimer,, Delete
}</Item>
			<Item name="tooltip编辑框edit" tv="9709216">TipGuiEscape:
Gui, Tip:Destroy
Return

tip(ttext := "", x := 0, y := 0) {
 If (ttext &gt; "") {
  Gui, Tip:New, +ToolWindow -Caption +AlwaysOnTop
  Gui, Margin, 1, 1
  Gui, Add, Edit, r30  ReadOnly Multi, %ttext%
  Gui, Show, X%x% Y%y% NoActivate  AutoSize
 } Else Gui, Tip:Destroy
}</Item>
			<Item name="提示框tooltip" tv="9707984">PleasantNotify("PleasantNotify", "position t hc" , 600, 210, "t hc", "3")
Sleep, 3000
PleasantNotify("PleasantNotify", "position b hc" , 600, 210, "b hc", "3")
Sleep, 3000
PleasantNotify("PleasantNotify", "position default, b r" , 600, 210, "b r", "3")
Sleep, 3000
PleasantNotify("PleasantNotify", "position b l" , 600, 210, "b l", "3")
Sleep, 3000
PleasantNotify("PleasantNotify", "position t l" , 600, 210, "t l", "3")
Sleep, 3000
PleasantNotify("PleasantNotify", "position t r" , 600, 210, "t r", "3")
return

PleasantNotify(title, message, pnW=700, pnH=300, position="b r", time=10) {
    global pn_title, pn_msg, PN_hwnd, w, h
	Notify_Destroy()
	Gui, Notify: +AlwaysOnTop +ToolWindow -SysMenu -Caption +LastFound
	PN_hwnd := WinExist()
	WinSet, ExStyle, +0x20
	WinSet, Transparent, 0
	Gui, Notify: Color, 0xF2F2F0
	Gui, Notify: Font, c0x07D82F s18 wBold, Segoe UI
	Gui, Notify: Add, Text, % " x" 20 " y" 12 " w" pnW-20 " vpn_title", % title
	Gui, Notify: Font, cBlack s15 wRegular
	Gui, Notify: Add, Text, % " x" 20 " y" 56 " w" pnW-20 " h" pnH-56 " vpn_msg", % message
	RealW := pnW + 50
	RealH := pnH + 20
	Gui, Notify: Show, W%RealW% H%RealH% NoActivate
	WinMove(PN_hwnd, position)
	if A_ScreenDPI = 96
		WinSet, Region,0-0 w%pnW% h%pnH% R40-40,%A_ScriptName%
	/* For Screen text size 125%
	if A_ScreenDPI = 120
		WinSet, Region, 0-0 w800 h230 R40-40, %A_ScriptName%
	*/
	winfade("ahk_id " PN_hwnd,210,5)
	if (time &lt;&gt; "P")
	{
		Closetick := time*1000
		SetTimer, ByeNotify, % Closetick
	}
}

Notify_Destroy() {
	global PN_hwnd
	ByeNotify:
	SetTimer, ByeNotify, Off
    winfade("ahk_id " PN_hwnd,0,5)
    Gui, Notify: Destroy
	return
}

pn_mod_title(title) {
	global pn_title
	GuiControl, Notify: Text,pn_title, % title
}

pn_mod_msg(message) {
	global pn_msg
	GuiControl, Notify: Text,pn_msg, % message
}

WinMove(hwnd,position) {
   SysGet, Mon, MonitorWorkArea
   WinGetPos,ix,iy,w,h, ahk_id %hwnd%
   x := InStr(position,"l") ? MonLeft : InStr(position,"hc") ?  (MonRight-w)/2 : InStr(position,"r") ? MonRight - w : ix
   y := InStr(position,"t") ? MonTop : InStr(position,"vc") ?  (MonBottom-h)/2 : InStr(position,"b") ? MonBottom - h : iy
   WinMove, ahk_id %hwnd%,,x,y
}

winfade(w:="",t:=128,i:=1,d:=10) {
    w:=(w="")?("ahk_id " WinActive("A")):w
    t:=(t&gt;255)?255:(t&lt;0)?0:t
    WinGet,s,Transparent,%w%
    s:=(s="")?255:s ;prevent trans unset bug
    WinSet,Transparent,%s%,%w%
    i:=(s&lt;t)?abs(i):-1*abs(i)
    while(k:=(i&lt;0)?(s&gt;t):(s&lt;t)&amp;&amp;WinExist(w)) {
        WinGet,s,Transparent,%w%
        s+=i
        WinSet,Transparent,%s%,%w%
        sleep %d%
    }
}</Item>
			<Item name="可移动movetooltip" tv="9708320">text = 
(%
UpdateText(hTooltip, TextArray) {
   static TTM_UPDATETIPTEXT := A_IsUnicode ? 0x439 : 0x40C
   text := TextArray.Pop()
   VarSetCapacity(TOOLINFO, sz := 24 + A_PtrSize*6, 0)
   NumPut(sz, TOOLINFO)
   NumPut(&amp;text, TOOLINFO, 24 + A_PtrSize*3)
   SendMessage, TTM_UPDATETIPTEXT,, &amp;TOOLINFO,, ahk_id %hTooltip%
   if (TextArray[1] = "")
      SetTimer,, Delete
)
#NoEnv
OnMessage(0x201, "WM_LBUTTONDOWN")

Global tClass:="SysShadow,Alternate Owner,tooltips_class32,DummyDWMListenerWindow,EdgeUiInputTopWndClass,ApplicationFrameWindow,TaskManagerWindow,Qt5QWindowIcon,Windows.UI.Core.CoreWindow,WorkerW,Progman,Internet Explorer_Hidden,Shell_TrayWnd" ; HH Parent

WinGetActiveTitle, aWin
ToolTip,% text, 0, 0
return

WM_LBUTTONDOWN(wParam, lParam, msg, hwnd) {
	PostMessage, 0xA1, 2 ; WM_NCLBUTTONDOWN
	KeyWait, LButton, U
	Loop { ; adapted from https://autohotkey.com/board/topic/32171-how-to-get-the-id-of-the-next-or-previous-window-in-z-order/
        ; GetWindow() returns a decimal value, so we have to convert it to hex
        ; GetWindow() processes even hidden windows, so we move down the z oder until the next visible window is found
        hwnd := Format("0x{:x}", DllCall("GetWindow", UPtr,hwnd, UInt,2) ) ; 2 = GW_HWNDNEXT
        if DllCall("IsWindowVisible", UPtr,hwnd) {
            WinGet, Ex, ExStyle, ahk_id %hwnd%
            ;if ( IsWindowCloaked(hwnd) || Ex &amp; (0x8 | 0x80 | 0x8000000) ) ;WS_EX_TOPMOST, WS_EX_TOOLWINDOW, WS_EX_NOACTIVATE
            if (IsWindowCloaked(hwnd) || Ex &amp; 0x8000088) ;WS_EX_TOPMOST, WS_EX_TOOLWINDOW, WS_EX_NOACTIVATE
		Continue
            WinGetClass, cClass, ahk_id %hwnd%
            if InStr(tClass, cClass, 1) ; if cClass in %tClass%
                Continue
            else break
        }
    }   WinActivate, ahk_id %hwnd%
}

IsWindowCloaked(hwnd) {
    return DllCall("dwmapi\DwmGetWindowAttribute", "ptr",hwnd, "int",14, "int*",cloaked, "int",4) &gt;= 0
        &amp;&amp; cloaked
}

Esc::exitapp</Item>
			<Item name="控件颜色修改" tv="9709328">;https://www.autohotkey.com/boards/viewtopic.php?f=6&amp;t=2197&amp;hilit=CtlColor_Edit
#NoEnv
OnExit, GuiClose
; ----------------------------------------------------------------------------------------------------------------------
SysGet, SGW, 71 ; SM_CXMENUCHECK
LB_SETCURSEL := 0x186
CB_SETCURSEL := 0x14E
Red   := "FF0000"
Green := "00C000"
Blue  := "0000FF"
Pink  := "FF20FF"
; ----------------------------------------------------------------------------------------------------------------------
Gui, Margin, 10, 10
Gui, Add, Radio, vSTDRB1 gSTDRBG hwndRBID1 Checked, Standard Radio 1
CtlColors.Attach(RBID1, "Lime", "")
Gui, Add, Radio, x+55 ym vSTDRB2 gSTDRBG hwndRBID2, Standard Radio 2
Gui, Add, CheckBox, xm vSTDCB1 gSTDCB1 hwndCBID1, Standard CheckBox
CtlColors.Attach(CBID1, "C0C0C0", "Red")
; ----------------------------------------------------------------------------------------------------------------------
Gui, Add, Text, xm w292 h2 +0x1000
; "Faked" RadioButtons -------------------------------------------------------------------------------------------------
; Note: Minimum width and height are font, font size and OS dependend, if you get below the limit, nothing is shown!!!
Gui, Add, Radio, xm w%SGW% h20 gRBG vRB1 Section Group Checked
Gui, Add, Radio, xm wp hp gRBG vRB2
Gui, Add, Radio, xm wp hp gRBG vRB3
Gui, Add, Text, ys x+5 w50 hp 0x200 cBlue gRBG vRT1 hwndRTID1, % "Radio 1"
Gui, Add, Text, xp y+10 wp hp 0x200 cBlue gRBG vRT2 hwndRTID2, % "Radio 2"
Gui, Add, Text, xp y+10 wp hp 0x200 cBlue gRBG vRT3 hwndRTID3, % "Radio 3"
RBGA := 1
CtlColors.Attach(RTID%RBGA%, "Yellow", "Blue")
; "Faked" CheckBox -----------------------------------------------------------------------------------------------------
; Note: for minimum width see "Faked" RadioButtons
Gui, Add, CheckBox, ys x+80 w%SGW% h20 gCB1 vCB1 Section
Gui, Add, Text, x+5 yp hp 0x200 gCB1 vCT1 hwndCTID1, % " Check me! "
CtlColors.Attach(CTID1, "", "Green")
; ComboBox -------------------------------------------------------------------------------------------------------------
Gui, Add, Combobox, xs y+40 w141 gCBB1 vCBB1 hwndCBBID1
   , ComboBox 1||ComboBox 2|ComboBox 3
CtlColors.Attach(CBBID1, "Aqua", "Red")
; ----------------------------------------------------------------------------------------------------------------------
Gui, Add, Text, xm w292 h2 +0x1000
; ListBox --------------------------------------------------------------------------------------------------------------
Gui, Add, ListBox, xm w292 r4 gLB1 vLB1 hwndLBID1
   , ListBox Red|ListBox Green|ListBox Blue|ListBox Pink
CtlColors.Attach(LBID1, Red, "White")
GuiControl, Choose, LB1, |1
; ----------------------------------------------------------------------------------------------------------------------
Gui, Add, Text, xm w292 h2 +0x1000
; Edit -----------------------------------------------------------------------------------------------------------------
Gui, Font, s10
Gui, Add, Edit, xm w292 r10 vED1 hwndEDID1, I'm an Edit, edit me!
CtlColors.Attach(EDID1, "606060", "Aqua")
Gui, Add, Edit, xm w292 vED2 hwndEDID2 +Disabled, % " I'm disabled!"
CtlColors.Attach(EDID2, "Gray", "Lime")
; ----------------------------------------------------------------------------------------------------------------------
Gui, Show, , Colored Controls
Return
; ----------------------------------------------------------------------------------------------------------------------
GuiClose:
GuiEscape:
   Gui, Destroy
   CtlColors.Free()
ExitApp
; ----------------------------------------------------------------------------------------------------------------------
GuiSize:
   If (A_EventInfo != 1) {
      Gui, %A_Gui%:+LastFound
      WinSet, ReDraw
   }
Return
; ----------------------------------------------------------------------------------------------------------------------
STDRBG:
   GuiControlGet, STDRB1
   CtlColors.Change(RBID1, (STDRB1 ? "Lime" : ""), "006000")
   CtlColors.Change(RBID2, (STDRB1 ? "" : "Lime"), "006000")
Return
; ----------------------------------------------------------------------------------------------------------------------
STDCB1:
   GuiControlGet, STDCB1
   CtlColors.Change(CBID1, (STDCB1 ? "Lime" : "C0C0C0"), "Red")
   Return
; ----------------------------------------------------------------------------------------------------------------------
RBG:
   RBG := SubStr(A_GuiControl, 3)
   If (RBG != RBGA) {
      CtlColors.Detach(RTID%RBGA%)
      CtlColors.Attach(RTID%RBG%, "Yellow", "Blue")
      GuiControl, , RB%RBG%, 1
      RBGA := RBG
   }
Return
; ----------------------------------------------------------------------------------------------------------------------
LB1:
   GuiControlGet, LB1
   StringSplit, LC, LB1, %A_Space%
   If (%LC2%) {
      BG := %LC2%, TX := "White"
      CtlColors.Change(LBID1, BG, TX)
      SendMessage, LB_SETCURSEL, -1, 0, , ahk_id %LBID1%
   }
Return
; ----------------------------------------------------------------------------------------------------------------------
CB1:
   GuiControlGet, CB1
   If (A_GuiControl = "CT1")
      CB1 ^= True
   If (CB1)
      CtlColors.Change(CTID1, "Lime", "406060")
   Else
      CtlColors.Change(CTID1, "", "Green")
   GuiControl, , CB1, %CB1%
Return
; ----------------------------------------------------------------------------------------------------------------------
CBB1:
Return
; AHK 1.1+
; ======================================================================================================================
; Function:          Auxiliary object to color controls on WM_CTLCOLOR... notifications.
;                    Supported controls are: Checkbox, ComboBox, DropDownList, Edit, ListBox, Radio, Text.
;                    Checkboxes and Radios accept only background colors due to design.
; Namespace:         CtlColors
; Tested with:       1.1.25.02
; Tested on:         Win 10 (x64)
; Change log:        1.0.04.00/2017-10-30/just me  -  added transparent background (BkColor = "Trans").
;                    1.0.03.00/2015-07-06/just me  -  fixed Change() to run properly for ComboBoxes.
;                    1.0.02.00/2014-06-07/just me  -  fixed __New() to run properly with compiled scripts.
;                    1.0.01.00/2014-02-15/just me  -  changed class initialization.
;                    1.0.00.00/2014-02-14/just me  -  initial release.
; ======================================================================================================================
; This software is provided 'as-is', without any express or implied warranty.
; In no event will the authors be held liable for any damages arising from the use of this software.
; ======================================================================================================================
Class CtlColors {
   ; ===================================================================================================================
   ; Class variables
   ; ===================================================================================================================
   ; Registered Controls
   Static Attached := {}
   ; OnMessage Handlers
   Static HandledMessages := {Edit: 0, ListBox: 0, Static: 0}
   ; Message Handler Function
   Static MessageHandler := "CtlColors_OnMessage"
   ; Windows Messages
   Static WM_CTLCOLOR := {Edit: 0x0133, ListBox: 0x134, Static: 0x0138}
   ; HTML Colors (BGR)
   Static HTML := {AQUA: 0xFFFF00, BLACK: 0x000000, BLUE: 0xFF0000, FUCHSIA: 0xFF00FF, GRAY: 0x808080, GREEN: 0x008000
                 , LIME: 0x00FF00, MAROON: 0x000080, NAVY: 0x800000, OLIVE: 0x008080, PURPLE: 0x800080, RED: 0x0000FF
                 , SILVER: 0xC0C0C0, TEAL: 0x808000, WHITE: 0xFFFFFF, YELLOW: 0x00FFFF}
   ; Transparent Brush
   Static NullBrush := DllCall("GetStockObject", "Int", 5, "UPtr")
   ; System Colors
   Static SYSCOLORS := {Edit: "", ListBox: "", Static: ""}
   ; Error message in case of errors
   Static ErrorMsg := ""
   ; Class initialization
   Static InitClass := CtlColors.ClassInit()
   ; ===================================================================================================================
   ; Constructor / Destructor
   ; ===================================================================================================================
   __New() { ; You must not instantiate this class!
      If (This.InitClass == "!DONE!") { ; external call after class initialization
         This["!Access_Denied!"] := True
         Return False
      }
   }
   ; ----------------------------------------------------------------------------------------------------------------
   __Delete() {
      If This["!Access_Denied!"]
         Return
      This.Free() ; free GDI resources
   }
   ; ===================================================================================================================
   ; ClassInit       Internal creation of a new instance to ensure that __Delete() will be called.
   ; ===================================================================================================================
   ClassInit() {
      CtlColors := New CtlColors
      Return "!DONE!"
   }
   ; ===================================================================================================================
   ; CheckBkColor    Internal check for parameter BkColor.
   ; ===================================================================================================================
   CheckBkColor(ByRef BkColor, Class) {
      This.ErrorMsg := ""
      If (BkColor != "") &amp;&amp; !This.HTML.HasKey(BkColor) &amp;&amp; !RegExMatch(BkColor, "^[[:xdigit:]]{6}$") {
         This.ErrorMsg := "Invalid parameter BkColor: " . BkColor
         Return False
      }
      BkColor := BkColor = "" ? This.SYSCOLORS[Class]
              :  This.HTML.HasKey(BkColor) ? This.HTML[BkColor]
              :  "0x" . SubStr(BkColor, 5, 2) . SubStr(BkColor, 3, 2) . SubStr(BkColor, 1, 2)
      Return True
   }
   ; ===================================================================================================================
   ; CheckTxColor    Internal check for parameter TxColor.
   ; ===================================================================================================================
   CheckTxColor(ByRef TxColor) {
      This.ErrorMsg := ""
      If (TxColor != "") &amp;&amp; !This.HTML.HasKey(TxColor) &amp;&amp; !RegExMatch(TxColor, "i)^[[:xdigit:]]{6}$") {
         This.ErrorMsg := "Invalid parameter TextColor: " . TxColor
         Return False
      }
      TxColor := TxColor = "" ? ""
              :  This.HTML.HasKey(TxColor) ? This.HTML[TxColor]
              :  "0x" . SubStr(TxColor, 5, 2) . SubStr(TxColor, 3, 2) . SubStr(TxColor, 1, 2)
      Return True
   }
   ; ===================================================================================================================
   ; Attach          Registers a control for coloring.
   ; Parameters:     HWND        - HWND of the GUI control                                   
   ;                 BkColor     - HTML color name, 6-digit hexadecimal RGB value, or "" for default color
   ;                 ----------- Optional 
   ;                 TxColor     - HTML color name, 6-digit hexadecimal RGB value, or "" for default color
   ; Return values:  On success  - True
   ;                 On failure  - False, CtlColors.ErrorMsg contains additional informations
   ; ===================================================================================================================
   Attach(HWND, BkColor, TxColor := "") {
      ; Names of supported classes
      Static ClassNames := {Button: "", ComboBox: "", Edit: "", ListBox: "", Static: ""}
      ; Button styles
      Static BS_CHECKBOX := 0x2, BS_RADIOBUTTON := 0x8
      ; Editstyles
      Static ES_READONLY := 0x800
      ; Default class background colors
      Static COLOR_3DFACE := 15, COLOR_WINDOW := 5
      ; Initialize default background colors on first call -------------------------------------------------------------
      If (This.SYSCOLORS.Edit = "") {
         This.SYSCOLORS.Static := DllCall("User32.dll\GetSysColor", "Int", COLOR_3DFACE, "UInt")
         This.SYSCOLORS.Edit := DllCall("User32.dll\GetSysColor", "Int", COLOR_WINDOW, "UInt")
         This.SYSCOLORS.ListBox := This.SYSCOLORS.Edit
      }
      This.ErrorMsg := ""
      ; Check colors ---------------------------------------------------------------------------------------------------
      If (BkColor = "") &amp;&amp; (TxColor = "") {
         This.ErrorMsg := "Both parameters BkColor and TxColor are empty!"
         Return False
      }
      ; Check HWND -----------------------------------------------------------------------------------------------------
      If !(CtrlHwnd := HWND + 0) || !DllCall("User32.dll\IsWindow", "UPtr", HWND, "UInt") {
         This.ErrorMsg := "Invalid parameter HWND: " . HWND
         Return False
      }
      If This.Attached.HasKey(HWND) {
         This.ErrorMsg := "Control " . HWND . " is already registered!"
         Return False
      }
      Hwnds := [CtrlHwnd]
      ; Check control's class ------------------------------------------------------------------------------------------
      Classes := ""
      WinGetClass, CtrlClass, ahk_id %CtrlHwnd%
      This.ErrorMsg := "Unsupported control class: " . CtrlClass
      If !ClassNames.HasKey(CtrlClass)
         Return False
      ControlGet, CtrlStyle, Style, , , ahk_id %CtrlHwnd%
      If (CtrlClass = "Edit")
         Classes := ["Edit", "Static"]
      Else If (CtrlClass = "Button") {
         IF (CtrlStyle &amp; BS_RADIOBUTTON) || (CtrlStyle &amp; BS_CHECKBOX)
            Classes := ["Static"]
         Else
            Return False
      }
      Else If (CtrlClass = "ComboBox") {
         VarSetCapacity(CBBI, 40 + (A_PtrSize * 3), 0)
         NumPut(40 + (A_PtrSize * 3), CBBI, 0, "UInt")
         DllCall("User32.dll\GetComboBoxInfo", "Ptr", CtrlHwnd, "Ptr", &amp;CBBI)
         Hwnds.Insert(NumGet(CBBI, 40 + (A_PtrSize * 2, "UPtr")) + 0)
         Hwnds.Insert(Numget(CBBI, 40 + A_PtrSize, "UPtr") + 0)
         Classes := ["Edit", "Static", "ListBox"]
      }
      If !IsObject(Classes)
         Classes := [CtrlClass]
      ; Check background color -----------------------------------------------------------------------------------------
      If (BkColor &lt;&gt; "Trans")
         If !This.CheckBkColor(BkColor, Classes[1])
            Return False
      ; Check text color -----------------------------------------------------------------------------------------------
      If !This.CheckTxColor(TxColor)
         Return False
      ; Activate message handling on the first call for a class --------------------------------------------------------
      For I, V In Classes {
         If (This.HandledMessages[V] = 0)
            OnMessage(This.WM_CTLCOLOR[V], This.MessageHandler)
         This.HandledMessages[V] += 1
      }
      ; Store values for HWND ------------------------------------------------------------------------------------------
      If (BkColor = "Trans")
         Brush := This.NullBrush
      Else
         Brush := DllCall("Gdi32.dll\CreateSolidBrush", "UInt", BkColor, "UPtr")
      For I, V In Hwnds
         This.Attached[V] := {Brush: Brush, TxColor: TxColor, BkColor: BkColor, Classes: Classes, Hwnds: Hwnds}
      ; Redraw control -------------------------------------------------------------------------------------------------
      DllCall("User32.dll\InvalidateRect", "Ptr", HWND, "Ptr", 0, "Int", 1)
      This.ErrorMsg := ""
      Return True
   }
   ; ===================================================================================================================
   ; Change          Change control colors.
   ; Parameters:     HWND        - HWND of the GUI control
   ;                 BkColor     - HTML color name, 6-digit hexadecimal RGB value, or "" for default color
   ;                 ----------- Optional 
   ;                 TxColor     - HTML color name, 6-digit hexadecimal RGB value, or "" for default color
   ; Return values:  On success  - True
   ;                 On failure  - False, CtlColors.ErrorMsg contains additional informations
   ; Remarks:        If the control isn't registered yet, Add() is called instead internally.
   ; ===================================================================================================================
   Change(HWND, BkColor, TxColor := "") {
      ; Check HWND -----------------------------------------------------------------------------------------------------
      This.ErrorMsg := ""
      HWND += 0
      If !This.Attached.HasKey(HWND)
         Return This.Attach(HWND, BkColor, TxColor)
      CTL := This.Attached[HWND]
      ; Check BkColor --------------------------------------------------------------------------------------------------
      If (BkColor &lt;&gt; "Trans")
         If !This.CheckBkColor(BkColor, CTL.Classes[1])
            Return False
      ; Check TxColor ------------------------------------------------------------------------------------------------
      If !This.CheckTxColor(TxColor)
         Return False
      ; Store Colors ---------------------------------------------------------------------------------------------------
      If (BkColor &lt;&gt; CTL.BkColor) {
         If (CTL.Brush) {
            If (Ctl.Brush &lt;&gt; This.NullBrush)
               DllCall("Gdi32.dll\DeleteObject", "Prt", CTL.Brush)
            This.Attached[HWND].Brush := 0
         }
         If (BkColor = "Trans")
            Brush := This.NullBrush
         Else
            Brush := DllCall("Gdi32.dll\CreateSolidBrush", "UInt", BkColor, "UPtr")
         For I, V In CTL.Hwnds {
            This.Attached[V].Brush := Brush
            This.Attached[V].BkColor := BkColor
         }
      }
      For I, V In Ctl.Hwnds
         This.Attached[V].TxColor := TxColor
      This.ErrorMsg := ""
      DllCall("User32.dll\InvalidateRect", "Ptr", HWND, "Ptr", 0, "Int", 1)
      Return True
   }
   ; ===================================================================================================================
   ; Detach          Stop control coloring.
   ; Parameters:     HWND        - HWND of the GUI control
   ; Return values:  On success  - True
   ;                 On failure  - False, CtlColors.ErrorMsg contains additional informations
   ; ===================================================================================================================
   Detach(HWND) {
      This.ErrorMsg := ""
      HWND += 0
      If This.Attached.HasKey(HWND) {
         CTL := This.Attached[HWND].Clone()
         If (CTL.Brush) &amp;&amp; (CTL.Brush &lt;&gt; This.NullBrush)
            DllCall("Gdi32.dll\DeleteObject", "Prt", CTL.Brush)
         For I, V In CTL.Classes {
            If This.HandledMessages[V] &gt; 0 {
               This.HandledMessages[V] -= 1
               If This.HandledMessages[V] = 0
                  OnMessage(This.WM_CTLCOLOR[V], "")
         }  }
         For I, V In CTL.Hwnds
            This.Attached.Remove(V, "")
         DllCall("User32.dll\InvalidateRect", "Ptr", HWND, "Ptr", 0, "Int", 1)
         CTL := ""
         Return True
      }
      This.ErrorMsg := "Control " . HWND . " is not registered!"
      Return False
   }
   ; ===================================================================================================================
   ; Free            Stop coloring for all controls and free resources.
   ; Return values:  Always True.
   ; ===================================================================================================================
   Free() {
      For K, V In This.Attached
         If (V.Brush) &amp;&amp; (V.Brush &lt;&gt; This.NullBrush)
            DllCall("Gdi32.dll\DeleteObject", "Ptr", V.Brush)
      For K, V In This.HandledMessages
         If (V &gt; 0) {
            OnMessage(This.WM_CTLCOLOR[K], "")
            This.HandledMessages[K] := 0
         }
      This.Attached := {}
      Return True
   }
   ; ===================================================================================================================
   ; IsAttached      Check if the control is registered for coloring.
   ; Parameters:     HWND        - HWND of the GUI control
   ; Return values:  On success  - True
   ;                 On failure  - False
   ; ===================================================================================================================
   IsAttached(HWND) {
      Return This.Attached.HasKey(HWND)
   }
}
; ======================================================================================================================
; CtlColors_OnMessage
; This function handles CTLCOLOR messages. There's no reason to call it manually!
; ======================================================================================================================
CtlColors_OnMessage(HDC, HWND) {
   Critical
   If CtlColors.IsAttached(HWND) {
      CTL := CtlColors.Attached[HWND]
      If (CTL.TxColor != "")
         DllCall("Gdi32.dll\SetTextColor", "Ptr", HDC, "UInt", CTL.TxColor)
      If (CTL.BkColor = "Trans")
         DllCall("Gdi32.dll\SetBkMode", "Ptr", HDC, "UInt", 1) ; TRANSPARENT = 1
      Else
         DllCall("Gdi32.dll\SetBkColor", "Ptr", HDC, "UInt", CTL.BkColor)
      Return CTL.Brush
   }
}</Item>
			<Item name="json作为配置文件" tv="9709440">#include C:\Users\ahker\Desktop\我的AHK程序\库\v1\json.ahk

json_path := A_ScriptDir . "/json.json"
config := {}
loadconfig(config, json_path)
config.parameter1 := "ahk2"
saveconfig(config, json_path)
loadconfig(ByRef config, json_path)
{
    FileRead, OutputVar,% json_path
    config := json_toobj(outputvar)
}

saveconfig(config, json_path)
{
    str := json_fromobj(config)
    FileDelete, % json_path
    FileAppend,% str,% json_path
}</Item></Item>
		<Item name="代码美化pretty" tv="9708208">run,http://sl5.it/SL5_preg_contentFinder/examples/AutoHotKey/converts_your_autohotkey_code_into_pretty_indented_source_code.php</Item></Item>
	<Item name="@cpp" tv="9709664">
		<Item name="帮助书册" tv="9706864"></Item>
		<Item name="代码段" tv="9706976"></Item></Item>
	<Item name="@rust" tv="9705856"></Item>
	<Item name="@perl" tv="9706080"></Item>
	<Item name="@mysql" tv="9706192"></Item>
</Menu>
